<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yszhao的博客</title>
  
  <subtitle>记录我的生活 学习</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-06-29T05:53:35.969Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>yszhao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx配置-rewrite</title>
    <link href="http://example.com/posts/a0181459.html"/>
    <id>http://example.com/posts/a0181459.html</id>
    <published>2024-06-29T04:04:32.000Z</published>
    <updated>2024-06-29T05:53:35.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rewrite-作用"><a href="#rewrite-作用" class="headerlink" title="rewrite 作用"></a>rewrite 作用</h1><p>用于实现URL的重写，URL的重写是非常有用的功能，<br>比如它可以在我们改变网站结构之后，不需要客户端修改原来的书签，<br>也无需其他网站修改我们的链接，就可以设置为自动访问，另外还可以在一定程度上提高网站的安全性</p><p>示例<br>浏览器访问url <a href="http://www.example.com/abc/file/a.jpg">http://www.example.com/abc/file/a.jpg</a><br>实际访问 <a href="http://www.example.com/bb/a.jpg">http://www.example.com/bb/a.jpg</a></p><p>浏览器访问url <a href="http://www.example.com/index/abc.html">http://www.example.com/index/abc.html</a><br>实际访问 <a href="http://www.example.com/index.php?r=index/abc">http://www.example.com/index.php?r=index/abc</a></p><h1 id="rewrite应用场景"><a href="#rewrite应用场景" class="headerlink" title="rewrite应用场景"></a>rewrite应用场景</h1><p>1、URL看起来更规范、合理<br>2、企业会将动态URL地址伪装成静态地址提供服务<br>3、网址换新域名后，让旧的访问跳转到新的域名上<br>4、服务端某些业务调整</p><h1 id="rewrite调试"><a href="#rewrite调试" class="headerlink" title="rewrite调试"></a>rewrite调试</h1><p>rewrite 日志记录指令<br>指令    rewrite_log<br>作用域 http, server, location<br>指令值选项    on 或 off<br>当指令值为 on 时，rewrite 的执行结果会以 notice 级别记录到 Nginx 的 error 日志文件中</p><p>示例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">      <span class="attribute">rewrite_log</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nginx正则表达式"><a href="#nginx正则表达式" class="headerlink" title="nginx正则表达式"></a>nginx正则表达式</h1><p>常用的正则表达式元字符<br>^：匹配输入字符串的起始位置<br>$：匹配输入字符串的结束位置<br>*****：匹配前面的字符零次或多次<br>+：匹配前面的字符一次或多次<br>?：匹配前面的字符零次或一次<br>.：匹配除\n之外的任何单个字符 使用[.\n]可以匹配包括\n在内的任意字符<br>****：转义符<br>\d：匹配纯数字<br>{n}：重复n次<br>{n,}：重复n次或更多次<br>[c]：匹配单个字符c<br>[a-z]：匹配a-z小写字母的任意一个<br>[a-zA-Z]：匹配a-z小写字母或A-Z大写字母的任意一个<br>（）：表达式的开始和结束位置<br>|：或运算符</p><h1 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h1><pre><code>location ~* .*\.(mp4|avi|wmv|mpg|flv|rm|mov) &#123;    add_header Accept-Ranges bytes;  if ($request_uri ~* ^(.*)file/Image/annex/(.*)/(.*))&#123;    set $file_name $3;    rewrite (.*) $scheme://$host/$file_name;  &#125;  #视频保存的目录  root /www/wwwroot/tjproject-resources/WebAnnexFile/451772413496005765/;  mp4;  mp4_buffer_size 1m;#处理mp4初始内存大小  mp4_max_buffer_size 50m;#处理mp4最大内存大小&#125;location ~ .*\.(mp4|avi|wmv|mpg|flv|rm|mov) &#123;  if ($request_uri ~* ^/monitor_videos/(.*))&#123;    set $file_name $1;    rewrite (.*) $scheme://$host/$file_name;  &#125;  # #视频保存的目录  root /www/wwwroot/aigis_resources_yzc/monitor_videos/;  mp4;  mp4_buffer_size 1m;#处理mp4初始内存大小  mp4_max_buffer_size 50m;#处理mp4最大内存大小&#125;location ~* /upload/。*\.php$&#123;    rewrite (.+) http://www.index.com permanent&#125;server &#123;     listen 80;     server_name example.com www.example.com;         if ($server_port !~ 443)&#123;         rewrite ^(/.*)$ https://$host$1 permanent;         &#125;         # 其他配置... &#125;if ($scheme = http ) &#123;    return 301 https://$host$request_uri;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;rewrite-作用&quot;&gt;&lt;a href=&quot;#rewrite-作用&quot; class=&quot;headerlink&quot; title=&quot;rewrite 作用&quot;&gt;&lt;/a&gt;rewrite 作用&lt;/h1&gt;&lt;p&gt;用于实现URL的重写，URL的重写是非常有用的功能，&lt;br&gt;比如它可以在我们</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>gitlab备份恢复</title>
    <link href="http://example.com/posts/6551734d.html"/>
    <id>http://example.com/posts/6551734d.html</id>
    <published>2024-06-28T14:14:05.000Z</published>
    <updated>2024-06-29T01:34:06.856Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>php开发-fastadmin按钮弹框传数据到列表</title>
    <link href="http://example.com/posts/6df754b5.html"/>
    <id>http://example.com/posts/6df754b5.html</id>
    <published>2024-06-28T14:13:59.000Z</published>
    <updated>2024-06-29T01:34:06.857Z</updated>
    
    
    
    
    <category term="PHP开发" scheme="http://example.com/categories/PHP%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="fastadmin" scheme="http://example.com/tags/fastadmin/"/>
    
  </entry>
  
  <entry>
    <title>windows2012-R2发布asp网站</title>
    <link href="http://example.com/posts/dd0146de.html"/>
    <id>http://example.com/posts/dd0146de.html</id>
    <published>2024-06-25T12:22:20.000Z</published>
    <updated>2024-06-29T06:03:45.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-、安装asp-net-3-5-总是失败"><a href="#一-、安装asp-net-3-5-总是失败" class="headerlink" title="一 、安装asp.net 3.5 总是失败"></a>一 、安装asp.net 3.5 总是失败</h1><p>卸载相关补丁KB5027141  KB5028872  KB5028970  KB5029915<br><img src="../pic/win2012-net.png" alt="lena"></p><h1 id="二、-应用程序池"><a href="#二、-应用程序池" class="headerlink" title="二、 应用程序池"></a>二、 应用程序池</h1><pre><code>设置为 集成  2.0 的版本【安装.net 3.5 后 这边就是只有2.0的选项哦】</code></pre><h1 id="三、总是显示500，开启报错-方便调试"><a href="#三、总是显示500，开启报错-方便调试" class="headerlink" title="三、总是显示500，开启报错 方便调试"></a>三、总是显示500，开启报错 方便调试</h1><p>双击ASP 设置</p><pre><code>将错误发送到浏览器  true</code></pre><p><img src="../pic/iis-2.png" alt="lena">  </p><h1 id="四、设置文件夹权限"><a href="#四、设置文件夹权限" class="headerlink" title="四、设置文件夹权限"></a>四、设置文件夹权限</h1><p> everyone  读写就可以了</p><p> <img src="../pic/win2012-1.png" alt="lena">     </p><h1 id="五、Win2012-Microsoft-JET-Database-Engine-错误-‘80004005’"><a href="#五、Win2012-Microsoft-JET-Database-Engine-错误-‘80004005’" class="headerlink" title="五、Win2012  Microsoft JET Database Engine 错误 ‘80004005’"></a>五、Win2012  Microsoft JET Database Engine 错误 ‘80004005’</h1><pre><code>access 数据库没有权限访问设置c:/windows/temp或者%windir%/temp/erveryone  读写权限就可以了</code></pre><h1 id="六、IIS给网站配置https证书"><a href="#六、IIS给网站配置https证书" class="headerlink" title="六、IIS给网站配置https证书"></a>六、IIS给网站配置https证书</h1><h2 id="6-1导入入证书"><a href="#6-1导入入证书" class="headerlink" title="6.1导入入证书"></a>6.1导入入证书</h2><p><img src="../pic/iis-3.png" alt="lena"></p><h2 id="6-2配置证书"><a href="#6-2配置证书" class="headerlink" title="6.2配置证书"></a>6.2配置证书</h2><p><img src="../pic/iis-1.png" alt="lena"></p><h1 id="七、IIS限制上传配置"><a href="#七、IIS限制上传配置" class="headerlink" title="七、IIS限制上传配置"></a>七、IIS限制上传配置</h1><p>修改ASP 配置中 限制属性<br><img src="../pic/iis8-file-3.png" alt="lena"></p><p>网站中的配置修改(没配置项，可不配置)<br>在“节”选项下找到system.webServer/security/requestFiltering节。<br><img src="../pic/iis8-file-1.png" alt="lena"></p><p><img src="../pic/iis8-file-2.png" alt="lena"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-、安装asp-net-3-5-总是失败&quot;&gt;&lt;a href=&quot;#一-、安装asp-net-3-5-总是失败&quot; class=&quot;headerlink&quot; title=&quot;一 、安装asp.net 3.5 总是失败&quot;&gt;&lt;/a&gt;一 、安装asp.net 3.5 总是失败&lt;/</summary>
      
    
    
    
    <category term="服务器相关" scheme="http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>php开发-php-fpm进程被占满</title>
    <link href="http://example.com/posts/9b3ce30d.html"/>
    <id>http://example.com/posts/9b3ce30d.html</id>
    <published>2024-06-24T06:47:51.000Z</published>
    <updated>2024-06-24T06:48:41.647Z</updated>
    
    
    
    
    <category term="PHP开发" scheme="http://example.com/categories/PHP%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="PHP开发" scheme="http://example.com/tags/PHP%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php开发-swoole框架</title>
    <link href="http://example.com/posts/ab7af144.html"/>
    <id>http://example.com/posts/ab7af144.html</id>
    <published>2024-06-13T01:11:33.000Z</published>
    <updated>2024-06-24T06:48:41.649Z</updated>
    
    
    
    
    <category term="PHP开发" scheme="http://example.com/categories/PHP%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="PHP开发" scheme="http://example.com/tags/PHP%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php开发-websocket</title>
    <link href="http://example.com/posts/cab3e457.html"/>
    <id>http://example.com/posts/cab3e457.html</id>
    <published>2024-06-13T01:10:14.000Z</published>
    <updated>2024-06-24T06:48:41.646Z</updated>
    
    
    
    
    <category term="PHP开发" scheme="http://example.com/categories/PHP%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="PHP开发" scheme="http://example.com/tags/PHP%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php开发-Tcp连接</title>
    <link href="http://example.com/posts/680ac944.html"/>
    <id>http://example.com/posts/680ac944.html</id>
    <published>2024-06-13T01:09:50.000Z</published>
    <updated>2024-06-24T06:48:41.640Z</updated>
    
    
    
    
    <category term="PHP开发" scheme="http://example.com/categories/PHP%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="PHP开发" scheme="http://example.com/tags/PHP%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php开发-mysql锁</title>
    <link href="http://example.com/posts/33571e0f.html"/>
    <id>http://example.com/posts/33571e0f.html</id>
    <published>2024-06-11T14:23:14.000Z</published>
    <updated>2024-06-29T01:34:06.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、数据库中的锁"><a href="#一、数据库中的锁" class="headerlink" title="一、数据库中的锁"></a>一、数据库中的锁</h1><p>   数据库锁定机制简单来说，就是数据库为了保证数据的一致性，而使各种共享资源在被并发访问变得有序所设计的一种规则。</p><h2 id="1-1-表级锁"><a href="#1-1-表级锁" class="headerlink" title="1.1 表级锁"></a>1.1 表级锁</h2><p>   使用表级锁定的主要是 MyISAM，MEMORY，CSV 等一些非事务性存储引擎。</p><h2 id="1-2-行级锁"><a href="#1-2-行级锁" class="headerlink" title="1.2 行级锁"></a>1.2 行级锁</h2><p>   使用行级锁定的主要是 InnoDB 存储引擎。</p><h2 id="行级锁类型"><a href="#行级锁类型" class="headerlink" title="行级锁类型"></a>行级锁类型</h2><p>   对于InnoDB 在 RR（MySQL默认隔离级别）而言，对于 update、delete 和 insert 语句，<br>会自动给涉及数据集加排它锁（X）；</p><p>   对于普通 select 语句，innodb 不会加任何锁。<br>如果想在 select 操作的时候加上 S 锁 或者 X 锁，需要我们手动加锁。</p><h3 id="共享锁（简称-s-锁）"><a href="#共享锁（简称-s-锁）" class="headerlink" title="共享锁（简称 s 锁）"></a>共享锁（简称 s 锁）</h3><p>  不会阻塞其他事务对同一行的读请求，但会阻塞对同一行的写请求。<br>  只有当读锁释放后，才会执行其它事物的写操作。</p><h3 id="排它锁（简称-x-锁）"><a href="#排它锁（简称-x-锁）" class="headerlink" title="排它锁（简称 x 锁）"></a>排它锁（简称 x 锁）</h3><p>  会阻塞其他事务对同一行的读和写操作，只有当写锁释放后，才会执行其它事务的读写操作</p><h2 id="Sql示列"><a href="#Sql示列" class="headerlink" title="Sql示列"></a>Sql示列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 加共享锁（S） lock in share mode</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> ... lock <span class="keyword">in</span> share mode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 加排它锁（X)  for update</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> ... <span class="keyword">for</span> update</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LOCK TABLES 语句用于锁定一个或多个表</span></span><br><span class="line">LOCK TABLES users READ;</span><br></pre></td></tr></table></figure><p>InnoDB 中的 行锁 的实现依赖于 索引，一旦某个加锁操作没有使用到索引，那么该锁就会退化为表锁。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、数据库中的锁&quot;&gt;&lt;a href=&quot;#一、数据库中的锁&quot; class=&quot;headerlink&quot; title=&quot;一、数据库中的锁&quot;&gt;&lt;/a&gt;一、数据库中的锁&lt;/h1&gt;&lt;p&gt;   数据库锁定机制简单来说，就是数据库为了保证数据的一致性，而使各种共享资源在被并发访问变</summary>
      
    
    
    
    <category term="PHP开发" scheme="http://example.com/categories/PHP%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>java学习4-层级类</title>
    <link href="http://example.com/posts/4a58ed40.html"/>
    <id>http://example.com/posts/4a58ed40.html</id>
    <published>2024-06-03T06:16:17.000Z</published>
    <updated>2024-06-03T09:13:08.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据层"><a href="#数据层" class="headerlink" title="数据层"></a>数据层</h1><h2 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h2><p>  entity = 实体</p><p>  严格和数据库相对应，数据库中有什么字段，entity包中的类就有什么字段。因此当操作表时，操作这个类即可。</p><p>  比如user表中有name、id、age，则entity包中对应的同名类也只有这三个同名属性</p><p>  如果是严格对数据库表操作，就用entity</p><h2 id="model-（概念实体模型）实体类和模型"><a href="#model-（概念实体模型）实体类和模型" class="headerlink" title="model  （概念实体模型）实体类和模型"></a>model  （概念实体模型）实体类和模型</h2><p>  当用model当包名时，一般里面存的是实体类的模型，是用来给后端用的。</p><p>  比如user表中有name、id、age，出于安全原因，我们需要把用户的密码定义在另一表中，即user_passwd表，<br>  但进行相关操作时，我们往往需要将两个表关联使用，每次定义都很麻烦。</p><p>  因此可以在model层中定义user_model类，将user表中的信息与user_passwd表中的信息整合成一张综合表，<br>  这样在进行操作时只需调用综合表，就可以完成对两个表的关联操作</p><p>  如果想显示某个几个表的综合信息，就用model，注意model包一般放在service层</p><h2 id="DTO-（Data-Transfer-Object）数据传输对象"><a href="#DTO-（Data-Transfer-Object）数据传输对象" class="headerlink" title="DTO （Data Transfer Object）数据传输对象"></a>DTO （Data Transfer Object）数据传输对象</h2><p>   Data Transfer Object数据传输对象的简称，多用于多个系统之间，网络通信，数据库存取等。<br>   将调用或返回的数据保存在DTO中从而减少调用负载。它不包含业务逻辑处理，但可以有数据整合性的校验。<br>   DTO需要注意的是必须序列化，即implements Serializable，<br>   一般用于接口间调用参数的传递，或访问DAO层传递条件参数使用。</p><p>   一般来说，DTO是用于在不同层之间传输数据的一个普通Java类。<br>   它通常用于封装从数据库查询结果中提取的数据，或者用于在应用程序的不同模块之间传递数据。</p>  <font color="red"> <p>  一般在 前端（Web） </p><p>   对控制层（Controller）进行数据传输时使用，说白了就是</p><p>   前端向后台<br>   提交数据。</p><p>   xxxDTO，xxx为业务领域相关的名称<br>   </font></p><h2 id="VO-（View-Object）视图模型"><a href="#VO-（View-Object）视图模型" class="headerlink" title="VO （View Object）视图模型"></a>VO （View Object）视图模型</h2><p>   Value Object值对象的简称，主要体现在视图的对象，<br>   对于一个WEB页面将整个页面的属性封装成一个对象，然后用一个VO对象在控制层与视图层进行传输交换，<br>   比如页面要显示100个字段，而实体只有10个，就可以封装一个VO返回。<br><font color="red"><br>   一般用在业务逻辑层（Service） </p><p>   对前端（Web） 的 视图模型效果控制的展示上，说白了就是</p><p>   后台向前端<br>   传输数据。</p><p>   xxxVO，xxx一般为网页名称<br></font>   </p><h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><p>   主要用于接收页面表单中的数据或者页面显示用数据的存储，<br>   包含校验Validate方法,一般用于controller层用来接收前端传过来的参数   </p><h2 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h2><p>  domain = 域</p><p>  域是一个大范围，如简历域包括工作经验表、项目经验表、简历基本信息表。<br>  在domain包中，就可以定义一个大的简历对象，将三个表的内容整合在一个对象中，作为整体操作。  </p><p>  如果想对几个表综合操作，就用domain</p><h1 id="数据访问层"><a href="#数据访问层" class="headerlink" title="数据访问层"></a>数据访问层</h1><h2 id="DAO-（Data-Access-Object）数据访问对象"><a href="#DAO-（Data-Access-Object）数据访问对象" class="headerlink" title="DAO （Data Access Object）数据访问对象"></a>DAO （Data Access Object）数据访问对象</h2><p>   DAO(Data Access Object)是一个数据访问接口，数据访问：顾名思义就是与数据库打交道。<br>   夹在业务逻辑与数据库资源中间。<br><font color="red"><br>   一般在 业务逻辑层（Service） </p><p>  对</p><p>  数据库（SQL） 的访问时使用，一般能对SQL进行操作。</p><p>  xxxDAO，xxx即为实体类名（Entity实体）<br></font>    </p><h2 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据层&quot;&gt;&lt;a href=&quot;#数据层&quot; class=&quot;headerlink&quot; title=&quot;数据层&quot;&gt;&lt;/a&gt;数据层&lt;/h1&gt;&lt;h2 id=&quot;entity&quot;&gt;&lt;a href=&quot;#entity&quot; class=&quot;headerlink&quot; title=&quot;entity&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DNS问题</title>
    <link href="http://example.com/posts/7052941e.html"/>
    <id>http://example.com/posts/7052941e.html</id>
    <published>2024-05-25T05:35:34.000Z</published>
    <updated>2024-06-03T06:28:06.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu-系统"><a href="#ubuntu-系统" class="headerlink" title="ubuntu 系统"></a>ubuntu 系统</h1><h2 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h2><p>   /etc/resolv.conf  可能被重置</p><p>   查看是否启用systemd-resolved服务、NetworkManager服务</p><p>   systemctl status  systemd-resolved   用于提供本地DNS解析服务</p><p>   systemctl status  NetworkManager</p><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>   永久修改DNS方法</p><p>   /etc/systemd/resolved.conf  </p><p>   配置 指定 DNS 服务器，以空白分隔，支持 IPv4 或 IPv6 位置<br>   DNS=114.114.114.114 8.8.8.8</p><p>   重启服务生效<br>   systemctl restart systemd-resolved</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>   /etc/netplan 目录下【00-installer-config.yaml、其他yaml 有可能覆盖】</p><p>   配置示例：</p><pre><code>   # This is the network config written by &#39;subiquity&#39;   network:     ethernets:       ens160:         dhcp4: false         addresses:           - 192.168.100.203/24         routes:           - to: default             via: 192.168.100.1         nameservers:           addresses: [114.114.114.114、8.8.8.8]     version: 2</code></pre><p>   配置完执行<br>       sudo netplan apply</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><pre><code>如果重启 不生效 重置检查 /etc/cloud/cloud.cfg 文件中的 reslv_conf 注释</code></pre><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><pre><code>resolvectl statusnslookup               </code></pre><h1 id="redhat-centos系统"><a href="#redhat-centos系统" class="headerlink" title="redhat/centos系统"></a>redhat/centos系统</h1><pre><code>/etc/resolv.conf/etc/sysconfig/network-scripts/ifcfg-ens验证nslookup www.baidu.com</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ubuntu-系统&quot;&gt;&lt;a href=&quot;#ubuntu-系统&quot; class=&quot;headerlink&quot; title=&quot;ubuntu 系统&quot;&gt;&lt;/a&gt;ubuntu 系统&lt;/h1&gt;&lt;h2 id=&quot;传统方法&quot;&gt;&lt;a href=&quot;#传统方法&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>k8s安装配置</title>
    <link href="http://example.com/posts/5951e8f7.html"/>
    <id>http://example.com/posts/5951e8f7.html</id>
    <published>2024-05-16T11:58:36.000Z</published>
    <updated>2024-05-31T07:42:46.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、redhat-openEluer-22-Centos-系统-安装k8s"><a href="#一、redhat-openEluer-22-Centos-系统-安装k8s" class="headerlink" title="一、redhat/openEluer 22/Centos 系统 安装k8s"></a>一、redhat/openEluer 22/Centos 系统 安装k8s</h1><h2 id="1-1-更新源"><a href="#1-1-更新源" class="headerlink" title="1.1 更新源"></a>1.1 更新源</h2><p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/Centos-7.repo</a><br>编辑替换  %s/$releasever/7/g</p><p>设置仓库，需要安装所需的软件包。yum-utils 提供了 yum-config-manager ，<br>并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2</p><p>yum install -y yum-utils device-mapper-persistent-data lvm2</p><p>yum-config-manager –add-repo <a href="https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</a><br>编辑替换  %s/$releasever/7/g</p><h2 id="1-2-安装-docker"><a href="#1-2-安装-docker" class="headerlink" title="1.2 安装 docker"></a>1.2 安装 docker</h2><p>yum install docker-ce</p><h2 id="1-3-新增k8s源及安装"><a href="#1-3-新增k8s源及安装" class="headerlink" title="1.3 新增k8s源及安装"></a>1.3 新增k8s源及安装</h2><p>新增k8s源<br>cat &lt;<EOF > /etc/yum.repos.d/kubernetes.repo<br>[kubernetes]<br>name=Kubernetes<br>baseurl=<a href="https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/">https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</a><br>enabled=1<br>gpgcheck=0<br>EOF</p><p>yum install kubeadm kubelet kubectl </p><h1 id="二、ubuntu-系统安装-k8s"><a href="#二、ubuntu-系统安装-k8s" class="headerlink" title="二、ubuntu 系统安装 k8s"></a>二、ubuntu 系统安装 k8s</h1><p> sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</p><p> curl -s <a href="https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg">https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg</a> | sudo apt-key add -</p><p> sudo apt-add-repository “deb <a href="https://mirrors.aliyun.com/kubernetes/apt/">https://mirrors.aliyun.com/kubernetes/apt/</a> kubernetes-xenial main”</p><p> sudo apt-get update</p><p>  vi /etc/apt/sources.list</p><p> deb <a href="https://mirrors.aliyun.com/kubernetes/apt">https://mirrors.aliyun.com/kubernetes/apt</a> kubernetes-xenial main</p><p> apt-get update<br> sudo apt update</p><p> #sudo apt install -y kubelet=1.26.1-00 kubeadm=1.26.1-00 kubectl=1.26.1-00</p><p> sudo apt install kubelet kubeadm kubectl<br> sudo apt-mark hold kubelet kubeadm kubectl</p><h1 id="三、必要的系统设置"><a href="#三、必要的系统设置" class="headerlink" title="三、必要的系统设置"></a>三、必要的系统设置</h1><h2 id="3-1-关闭-selinux-关闭防火墙【暂时】（redhat系统）"><a href="#3-1-关闭-selinux-关闭防火墙【暂时】（redhat系统）" class="headerlink" title="3.1 关闭 selinux  关闭防火墙【暂时】（redhat系统）"></a>3.1 关闭 selinux  关闭防火墙【暂时】（redhat系统）</h2><p>零时关闭<br>   setenforce 0  </p><p>永久关闭<br>       vi /etc/selinux/config<br>       将参数修改为SELINUX=disabled</p><p>关闭防火墙</p><p>   systemctl stop iptables</p><p>   systemctl stop firewalld</p><p>   systemct stop ufw</p><h2 id="3-2-禁用交换分区"><a href="#3-2-禁用交换分区" class="headerlink" title="3.2 禁用交换分区"></a>3.2 禁用交换分区</h2><p>   swapoff -a </p><p>   /etc/fstab 文件下永久关闭<br>   打开/etc/fstab注释掉swap那一行</p><p>   sed -i ‘s/.<em>swap.</em>/#&amp;/‘ /etc/fstab  </p><h2 id="3-3-开启端口转发"><a href="#3-3-开启端口转发" class="headerlink" title="3.3 开启端口转发"></a>3.3 开启端口转发</h2><p>   vim  /proc/sys/net/ipv4/ip_forward<br>   sysctl -w net.ipv4.ip_forward=1</p><h2 id="3-4-修改内核参数"><a href="#3-4-修改内核参数" class="headerlink" title="3.4 修改内核参数"></a>3.4 修改内核参数</h2><p>cat &lt;<EOF >  /etc/sysctl.d/k8s.conf<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>EOF<br>sysctl –system </p><h2 id="3-5-设置时区更新时间"><a href="#3-5-设置时区更新时间" class="headerlink" title="3.5 设置时区更新时间"></a>3.5 设置时区更新时间</h2><pre><code> timedatectl  查看时区  设置时区 timedatectl set-timezone Asia/Shanghai </code></pre><h2 id="配置host"><a href="#配置host" class="headerlink" title="配置host"></a>配置host</h2><pre><code>vim /etc/hosts </code></pre><h1 id="三、master-节点配置"><a href="#三、master-节点配置" class="headerlink" title="三、master 节点配置"></a>三、master 节点配置</h1><h2 id="3-1-配置项-解释"><a href="#3-1-配置项-解释" class="headerlink" title="3.1 配置项 解释"></a>3.1 配置项 解释</h2><p> 自定义镜像进行初始化(推荐)<br> 使用自定义kubernets镜像仓库进行初始化</p><p> apiserver-advertise-address: 配置 apiserver ip  本机ip<br>                             指明用 Master 的哪个 interface 与 Cluster 的其他节点通信。<br>                             如果 Master 有多个 interface，建议明确指定，如果不指定，kubeadm 会自动选择有默认网关的 interface。<br>                             这里的ip为master节点ip，记得更换</p><p> apiserver-bind-port       : 配置 apiserver 端口 默认 6443</p><p> control-plane-endpoint    : 配置 控制端   ip  默认本机ip<br>                             cluster-endpoint 是映射到该 IP 的自定义 DNS 名称，这里配置hosts映射：192.168.0.113   cluster-endpoint。<br>                             这将允许你将 –control-plane-endpoint=cluster-endpoint 传递给 kubeadm init，并将相同的 DNS 名称传递给 kubeadm join。<br>                             稍后你可以修改 cluster-endpoint 以指向高可用性方案中的负载均衡器的地址。</p><p> service-cidr               这个参数指定了 Kubernetes 集群中服务（Service）的 IP 地址范围。在该示例中，服务 IP 地址将从 10.119.0.0 开始分配。</p><p> service-dns-domain         这个参数指定了 Kubernetes 集群中服务的 DNS 域名。在该示例中，服务的 DNS 域名将使用 “cluster.local”。</p><p> pod-network-cidr  :    这个参数指定了 Kubernetes 集群中 Pod 的 IP 地址范围。在该示例中，Pod 的 IP 地址将从 10.120.0.0 开始分配。<br>                        指定 Pod 网络的范围。Kubernetes 支持多种网络方案，而且不同网络方案对<br>                        –pod-network-cidr有自己的要求，这里设置为10.244.0.0/16 是因为我们将使用 flannel 网络方案<br>                        必须设置成这个 CIDR。</p><p> image-repository           这个用于指定从什么位置来拉取镜像（1.13版本才有的），默认值是k8s.gcr.io，<br>                            我们将其指定为国内镜像地址：registry.aliyuncs.com/google_containers</p><p> kubernetes-version        指定kubenets版本号，默认值是stable-1，会导致从<a href="https://dl.k8s.io/release/stable-1.txt%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7%EF%BC%8C">https://dl.k8s.io/release/stable-1.txt下载最新的版本号，</a><br>                           我们可以将其指定为固定版本（v1.22.1）来跳过网络请求</p><h2 id="3-2配置示例："><a href="#3-2配置示例：" class="headerlink" title="3.2配置示例："></a>3.2配置示例：</h2><p> kubeadm init <br> –apiserver-advertise-address 192.168.240.11 <br> –apiserver-bind-port 6443 <br> –control-plane-endpoint 192.168.240.11 <br> –service-cidr=10.119.0.0/16 <br> –service-dns-domain=”cluster.local” <br> –pod-network-cidr=10.120.0.0/16 <br> –image-repository registry.aliyuncs.com/google_containers </p><p> kubeadm init <br>  –apiserver-advertise-address=192.168.100.203 <br>  –image-repository registry.aliyuncs.com/google_containers <br>  –service-cidr=10.119.0.0/16 <br>  –pod-network-cidr=10.120.0.0/16 <br>  –kubernetes-version v1.28.2</p><p> kubeadm init <br>   –apiserver-advertise-address=192.168.31.200 <br>   –image-repository registry.aliyuncs.com/google_containers <br>   –kubernetes-version v1.18.0 <br>   –service-cidr=10.96.0.0/12 <br>   –pod-network-cidr=10.244.0.0/16</p><h2 id="3-3-配置-kubectl"><a href="#3-3-配置-kubectl" class="headerlink" title="3.3 配置 kubectl"></a>3.3 配置 kubectl</h2><p>   mkdir -p $HOME/.kube<br>   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config<br>   sudo chown $(id -u):$(id -g) $HOME/.kube/config<br>   echo ‘export KUBECONFIG=$HOME/.kube/config’ &gt;&gt; $HOME/.bashrc<br>   source ~/.bashrc</p><h2 id="3-3-配置网络"><a href="#3-3-配置网络" class="headerlink" title="3.3 配置网络"></a>3.3 配置网络</h2><p>   kubectl apply -f <a href="https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml">https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</a></p><p>   如果被墙，可以直接保存下列文件进行安装</p><p>   kubectl apply -f kube-flannel.yaml</p><h1 id="四、node-节点配置"><a href="#四、node-节点配置" class="headerlink" title="四、node 节点配置"></a>四、node 节点配置</h1><h2 id="4-1-配置文件处理"><a href="#4-1-配置文件处理" class="headerlink" title="4.1 配置文件处理"></a>4.1 配置文件处理</h2><p> mkdir -p $HOME/.kube</p><p> 复制master节点的 /etc/kubernetes/admin.conf 到 node节点 $HOME/.kube/config</p><p> sudo  $(id -u):$(id -g) $HOME/.kube/config</p><p> echo ‘export KUBECONFIG=$HOME/.kube/config’ &gt;&gt; $HOME/.bashrc</p><p> source ~/.bashrc</p><h2 id="4-2-加入节点"><a href="#4-2-加入节点" class="headerlink" title="4.2 加入节点"></a>4.2 加入节点</h2><p>   可以master 节点执行  kubeadm token create –print-join-command 获取加入节点命令</p><p>   kubeadm join 172.17.131.4:6443 –token decqn7.lwcygbjmzof0xny3  <br>   –discovery-token-ca-cert-hash sha256:8f0e8d2c04e38c7aa291d8b47be2bd8a5127bf1071263e01bdd5602ab331a01d</p><h1 id="五、相关命令"><a href="#五、相关命令" class="headerlink" title="五、相关命令"></a>五、相关命令</h1><p> 如何生成 Kubeadm Join 命令？<br> 您可以使用 command 生成 join 命令。kubeadm token create –print-join-command</p><p> 重置节点（清除kubeadm信息）<br> kubeadm reset</p><p> 查看 pod 节点<br> kubectl get nodes</p><p> 删除的节点<br> kubectl delete node <node_name></p><p>于官网镜像在国内访问不稳定，会出现访问失败。<br>使用国内镜像进行替换下载，在此pause使用3.9会导致集群无法初始化，还需要下载pause:3.6<br>以下命令在每台服务器上执行<br>使用自定义镜像仓库拉取镜像<br>kubeadm config images pull  <br>–image-repository registry.aliyuncs.com/google_containers <br>–kubernetes-version v1.28.2</p><h1 id="六-报错"><a href="#六-报错" class="headerlink" title="六 报错"></a>六 报错</h1><p> 报错如下<br> “open /run/systemd/resolve/resolv.conf: no such file or directory” pod=”kubelet<br> 解决：<br> yum install systemd-resolved 解决</p><p>报错如下：<br>combined from similar events): Failed to create pod sandbox: rpc error: code = Unknown desc = failed to setup network for sandbox &amp;quot;4d992cde6a671b8fa3264a90f5f11aa01d1713376abf0cdf9a4e27ec82860185&amp;quot;: plugin type=&amp;quot;flannel&amp;quot; failed (add): loadFlannelSubnetEnv<br>failed: open /run/flannel/subnet.env: no such file or directory</p><p>解决：<br>配置 /run/flannel/subnet.env<br>pod 网络信息 </p><p>FLANNEL_NETWORK=10.120.0.0/16<br>FLANNEL_SUBNET=10.120.0.1/24<br>FLANNEL_MTU=1450<br>FLANNEL_IPMASQ=true</p><p>报错如下：<br>[preflight] Running pre-flight checks<br>error execution phase preflight: [preflight] Some fatal errors occurred:<br>    [ERROR FileContent–proc-sys-net-ipv4-ip_forward]: /proc/sys/net/ipv4/ip_forward contents are not set to 1<br>[preflight] If you know what you are doing, you can make a check non-fatal with <code>--ignore-preflight-errors=...</code><br>To see the stack trace of this error execute with –v=5 or higher</p><p> 解决：<br>sysctl -w net.ipv4.ip_forward=1</p><p>报错如下：</p><p> NotReady message:Network plugin returns error: cni plugin not initialized<br> to get sandbox image &quot;registry.k8s.i</p><p> evel=info msg=”Stop CRI service”<br> 024-05-31T02:22:27.294384683Z” level=info msg=”stop pulling image registry.k8s.io/pause:3.8: active requests=1, bytes&gt;<br> 024-05-31T02:22:27.294515739Z” level=info msg=”trying next host” error=”failed to do request: Head &quot;<a href="https://us-west2&gt;/">https://us-west2&gt;</a> </p><p>解决</p><p>containerd config default &gt; /etc/containerd/config.toml</p><p>修改<br>sandbox_image = “registry.aliyuncs.com/google_containers/pause:3.9”</p><p>systemctl restart containerd</p><p>mkdir /etc/containerd<br>containerd config default &gt; /etc/containerd/config.toml<br>sed -i ‘/sandbox_image/s#registry.k8s.io/pause:3.8#registry.aliyuncs.com/google_containers/pause:3.9#g’ /etc/containerd/config.toml<br>sed -i ‘/SystemdCgroup/s/false/true/‘ /etc/containerd/config.toml<br>systemctl restart containerd</p><p>发现不了节点报错<br><a href="https://blog.csdn.net/qq_32264301/article/details/125486521">https://blog.csdn.net/qq_32264301/article/details/125486521</a></p><p> error=”rpc error: code = Unavailable desc = error reading from server: EOF” module=libcontainerd namespace=moby</p><p>报错<br>Error registering network: failed to acquire lease: subnet “10.244.0.0/16”<br>specified in the flannel net config doesn’t contain “10.120.0.0/24” PodCIDR of the “ubuntuutoootest” node </p><p>修改 kube-flannel.yml</p><p>net-conf.json: |<br>    {<br>      “Network”: “10.120.0.0/16”,<br>      “EnableNFTables”: false,<br>      “Backend”: {<br>        “Type”: “vxlan”<br>      }<br>    }</p><hr><h1 id="k8组件"><a href="#k8组件" class="headerlink" title="k8组件"></a>k8组件</h1><p>k8s的主要组件，以及它们主要是用来干什么的：</p><p>3.1 「主节点（Master）」<br>主节点负责管理集群的整体状态和控制工作节点的操作。它包括以下组件：</p><p>「API Server：」 提供了K8s API的入口，用于与Kubernetes进行交互。<br>「Controller Manager：」 负责监控系统状态，确保实际状态符合期望状态。<br>「Scheduler：」 负责将Pod调度到工作节点上运行。</p><p>3.2 「工作节点（Node）」<br>工作节点是集群中的计算资源，用于运行容器。每个工作节点包括以下组件：</p><p>「Kubelet：」 负责与主节点通信，确保在节点上运行所需的Pod。<br>「Container Runtime：」 用于启动和管理容器的软件，如Docker。<br>「Kube Proxy：」 负责在节点上实现Service的网络代理。</p><p>etcd：一款开源软件。提供可靠的分布式数据存储服务，用于持久化存储K8s集群的配置和状态</p><p>apiservice：用户程序（如kubectl）、K8s其它组件之间通信的接口。K8s其它组件之间不直接通信，而是通过API server通信的。这一点在上图的连接中可以体现，例如，只有API server连接了etcd，即其它组件更新K8s集群的状态时，只能通过API server读写etcd中的数据。</p><p>Scheduler：排程组件，为用户应用的每一可部署组件分配工作结点。</p><p>controller-manager：执行集群级别的功能，如复制组件、追踪工作结点状态、处理结点失败等。Controller Manager组件是由多个控制器组成的，其中很多控制器是按K8s的资源类型划分的，如Replication Manager（管理ReplicationController 资源），ReplicaSet Controller，PersistentVolume controller。</p><p>kube-proxy：在应用组件间负载均衡网络流量。</p><p>kubelet：管理工作结点上的容器。</p><p>Contriner runtime Docker， rkt等实际运行容器的组件</p><p>报错</p><p>报错</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、redhat-openEluer-22-Centos-系统-安装k8s&quot;&gt;&lt;a href=&quot;#一、redhat-openEluer-22-Centos-系统-安装k8s&quot; class=&quot;headerlink&quot; title=&quot;一、redhat/openEluer</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java学习3-Servlet及HttpSeverlet</title>
    <link href="http://example.com/posts/e9f2e524.html"/>
    <id>http://example.com/posts/e9f2e524.html</id>
    <published>2024-04-10T07:17:32.000Z</published>
    <updated>2024-04-10T07:56:31.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Servlet"><a href="#一、Servlet" class="headerlink" title="一、Servlet"></a>一、Servlet</h1><h2 id="1-1基础知识"><a href="#1-1基础知识" class="headerlink" title="1.1基础知识"></a>1.1基础知识</h2><p>Servlet是什么呢？Servlet就是一个服务端的小组件，这个小组件可以接受客户端发过来的信息，然后对其进行处理。</p><p>Servlet是一个抽象类，它的各种方法要由它的继承类和接口来实现。</p><h2 id="1-2继承关系"><a href="#1-2继承关系" class="headerlink" title="1.2继承关系"></a>1.2继承关系</h2><p> javax.servlet.Servlet接口</p><p>​ javax.servlet.GenericsServlet 抽象类</p><p>​ javax.servletHttpServlet</p><h2 id="1-3Servlet有下面三种方法："><a href="#1-3Servlet有下面三种方法：" class="headerlink" title="1.3Servlet有下面三种方法："></a>1.3Servlet有下面三种方法：</h2><p>   init （初始化方法）启动servlet 容器执行一次<br>   service（服务方法）<br>   destory（销毁方法）关闭servlet 容器 执行</p><h2 id="1-3示例代码"><a href="#1-3示例代码" class="headerlink" title="1.3示例代码"></a>1.3示例代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.study;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFirstServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, ServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;From service&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;Hello, Java Web.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二、HttpServlet"><a href="#二、HttpServlet" class="headerlink" title="二、HttpServlet"></a>二、HttpServlet</h1><h2 id="1-1基础知识-1"><a href="#1-1基础知识-1" class="headerlink" title="1.1基础知识"></a>1.1基础知识</h2><p>HttpServlet 实现了 Servlet<br>HttpServlet可以理解为专门处理Http文件的服务器组件Servlet<br><font color="red">如果客户端有信息发过来的话，HttpServlet会被调用的只有Servlet方法，<br>然后Servlet方法就会去判断对面发过来的请求是什么，调用doGet 还是doPost等等</font></p><h2 id="2-1HttpServlet有的方法："><a href="#2-1HttpServlet有的方法：" class="headerlink" title="2.1HttpServlet有的方法："></a>2.1HttpServlet有的方法：</h2><p>init()<br>service()  每次收到路径匹配的请求都要调用一次。<br>destory()<br>doGet(),<br>doPost(),<br>doPut/doDelete/doOption</p><h2 id="2-2-HttpServletRequest"><a href="#2-2-HttpServletRequest" class="headerlink" title="2.2 HttpServletRequest"></a>2.2 HttpServletRequest</h2><h2 id="2-3HttpServletResponse"><a href="#2-3HttpServletResponse" class="headerlink" title="2.3HttpServletResponse"></a>2.3HttpServletResponse</h2><h2 id="2-4-示例代码"><a href="#2-4-示例代码" class="headerlink" title="2.4 示例代码"></a>2.4 示例代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf8&quot;</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;这是一个doGet方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;这是一个doPost方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPut</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;这是一个doPut&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDelete</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;这是一个doDelete方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Servlet&quot;&gt;&lt;a href=&quot;#一、Servlet&quot; class=&quot;headerlink&quot; title=&quot;一、Servlet&quot;&gt;&lt;/a&gt;一、Servlet&lt;/h1&gt;&lt;h2 id=&quot;1-1基础知识&quot;&gt;&lt;a href=&quot;#1-1基础知识&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java学习2-运行javaee程序</title>
    <link href="http://example.com/posts/2b88779d.html"/>
    <id>http://example.com/posts/2b88779d.html</id>
    <published>2024-04-10T02:09:40.000Z</published>
    <updated>2024-04-10T07:05:29.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>src：（source）存放所有资源和代码<br>        main：主程序<br>                ○ java（源 根）：.java文件。package 包路径com.项目名称<br>                ○ resources（资源 根）：资源文件，如xml、properties配置文件。<br>                        templates：动态页面，如 thymeleaf 页面。<br>                                需要服务器渲染，所以直接访问是无意义的，也访问不到。<br>                        static：静态资源，如 html、css、js、image。<br>                                □ 可直接 localhost:8080/hello.html 访问该目录文件。<br>                                □ 也可 return “hello.html”; 跳转。<br>                        编译后，resources和源根在同一目录下！<br>                ○ lib：存放 jar包，需要设置添加到库。<br>                ○ webapp：web资源<br>                        页面静态资源：html、css、js、图片<br>                        WEB-INF：固定写法。此目录下的文件不能被外部(浏览器)直接访问。<br>                                lib：jar包存放的目录<br>                                web.xml：web 项目的配置文件(3.0规范之后可以省略)<br>                                classes：target中，java编译生成class文件和资源文件存放的路径。对于war项目，配置文件中的classpath就是指这里。<br>        test：测试程序<br>                java（测试 根）：.java文件。<br>                resources（测试资源 根）：资源文件，如xml、properties配置文件。<br>pom.xml：maven 配置文件。<br>target：存放 Maven 构建当前模块，所生成的输出文件。<br>        classes：这就是 classpath。<br>                com.**：存放编译后的 .class 文件<br>                资源文件：src/main/resources 的所有文件。<br>模块配置文件.iml</p><h1 id="运行程序代码"><a href="#运行程序代码" class="headerlink" title="运行程序代码"></a>运行程序代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFirstServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, ServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;From service&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;Hello, Java Web.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>javax.servlet 这个包找不到。前面提的过 Servlet API 是包含在 JavaEE 当中的。<br>为了方便，我们直接使用 Tomcat 附带的 servlet-api.jar 包。<br>下载 tomcat 就有<br>idea 具体操作如下图<br>方法一<br><img src="../pic/java2-1.png" alt="lena"></p><p>方法二<br><img src="../pic/java2-2.png" alt="lena"></p><h1 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h1><p>idea 调试<br>idea 配置tomcat 直接点击运行就可以了<br>idea 配置tomcat如下<br><img src="../pic/java2-3.jpg" alt="lena"></p><p>服务器部署。</p><p>tomcat 目录下的webapps 目录创建项目目录<br>示例如下：<br>    webapps<br>      - MyFirstServlet<br>        - WEB-INF<br>          - web.xml</p><p><font color="red">将 IDEA 编译出的产物（默认应该在 out/target 文件夹中）</font>，<br>把 package 结构已经对应的产物拷贝到 WEB-INF 中的 classes 文件<br>webapps</p><ul><li>MyFirstServlet<ul><li>WEB-INF<ul><li>classes<ul><li>com<ul><li>skyline<ul><li>MyFirstServlet.class</li></ul></li></ul></li></ul></li><li>web.xml</li></ul></li></ul></li></ul><h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><p>1.为啥idea 编译后 有时候在out 目录下 有时候子安target 目录下</p><p>在IDEA中，编译后生成的输出文件可以存放在不同的目录中，一般是由项目的配置文件决定的。<br>如果项目使用了Maven或者Gradle等构建工具，那么编译后的输出文件会存放在target目录下；<br>如果项目没有使用构建工具或者使用了自定义的构建配置，那么可以在IDEA中设置输出目录路径，<br>可能会存放在out目录下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h1&gt;&lt;p&gt;src：（source）存放所有资源和代码&lt;br&gt;        main：主程序&lt;br&gt;                ○</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux-防火墙相关</title>
    <link href="http://example.com/posts/10974f2f.html"/>
    <id>http://example.com/posts/10974f2f.html</id>
    <published>2024-03-25T10:55:25.000Z</published>
    <updated>2024-03-25T11:03:20.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>UFW是Debian系列的默认防火墙</p><p>firewall 是红帽系列7及以上的防火墙（如CentOS7.x）</p><p>iptables是红帽系列6及以下（如CentOS6.x）的防火墙</p><p>firewalld、ufw 与iptables的关系，可以理解为两者只是对iptables其进行了一层封装，<br>它们在用户交互方面做了非常多的改进，使其对用户更加友好，不需要再记住原来那么多命令了</p><h1 id="ufw相关命令"><a href="#ufw相关命令" class="headerlink" title="ufw相关命令"></a>ufw相关命令</h1><h1 id="firewalld相关命令"><a href="#firewalld相关命令" class="headerlink" title="firewalld相关命令"></a>firewalld相关命令</h1><h1 id="记奇葩问题"><a href="#记奇葩问题" class="headerlink" title="记奇葩问题"></a>记奇葩问题</h1><pre><code>配置了ufw vim /etc/ufw/before.rules*nat:PREROUTING ACCEPT [0:0]:POSTROUTING ACCEPT [0:0]-A PREROUTING -p tcp --dport 63301 -j REDIRECT --to-port 22#-A PREROUTING -p tcp -m tcp --dport 63306 -j DNAT --to-destination 127.0.0.1:22#-A POSTROUTING -j MASQUERADECOMMIT生效后iptables 即使ufw 删除 nat 记录还是存在查看iptables nat表sudo iptables -t nat -L -n --line-numbers</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1&gt;&lt;p&gt;UFW是Debian系列的默认防火墙&lt;/p&gt;
&lt;p&gt;firewall 是红帽系列7及以上的防火墙（如CentOS7.x）&lt;/p&gt;
&lt;p&gt;ip</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php开发-微信授权登录</title>
    <link href="http://example.com/posts/dc9d89c5.html"/>
    <id>http://example.com/posts/dc9d89c5.html</id>
    <published>2024-03-19T11:21:50.000Z</published>
    <updated>2024-03-20T09:47:15.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、注册微信开放平台"><a href="#一、注册微信开放平台" class="headerlink" title="一、注册微信开放平台"></a>一、注册微信开放平台</h1><pre><code>网址：https://open.weixin.qq.com/需要哪些资质  </code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、注册微信开放平台&quot;&gt;&lt;a href=&quot;#一、注册微信开放平台&quot; class=&quot;headerlink&quot; title=&quot;一、注册微信开放平台&quot;&gt;&lt;/a&gt;一、注册微信开放平台&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;网址：https://open.weixin.qq.com/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php开发-thinkphp钩子与行为</title>
    <link href="http://example.com/posts/9d1b4110.html"/>
    <id>http://example.com/posts/9d1b4110.html</id>
    <published>2024-03-19T03:11:00.000Z</published>
    <updated>2024-06-21T02:31:28.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统预留钩子"><a href="#系统预留钩子" class="headerlink" title="系统预留钩子"></a>系统预留钩子</h1><pre><code>app_init        应用初始化标签位app_dispatch    应用调度标签位app_begin       应用开始标签位module_init     模块初始化标签位action_begin    控制器开始标签位view_filter     视图输出过滤标签位app_end         应用结束标签位log_write       日志write方法标签位log_wrire_done  日志写入完成标签位reponse_send    响应发送标签位reponse_end     输出结束标签位</code></pre><h1 id="绑定钩子"><a href="#绑定钩子" class="headerlink" title="绑定钩子"></a>绑定钩子</h1><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><pre><code>    tags.php 定义数组键值对如下所示：    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 应用结束</span></span><br><span class="line">    <span class="string">&#x27;app_end&#x27;</span>      =&gt; [</span><br><span class="line">        <span class="string">&#x27;app\\admin\\behavior\\AdminLog&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure></code></pre><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><pre><code>    Hook::add(&#39;abc&#39;,&quot; app\\index\\behavior\\abc&quot;)</code></pre><h1 id="行为-具体钩子具体实现-定义"><a href="#行为-具体钩子具体实现-定义" class="headerlink" title="行为(具体钩子具体实现)定义"></a>行为(具体钩子具体实现)定义</h1><pre><code>namespace app\index\behaviorclass abc&#123;    public function run()    &#123;        // 行为逻辑    &#125;&#125;</code></pre><p>##如果行为类需要绑定到多个标签，可以采用如下定义：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">app_init</span>(<span class="params">&amp;<span class="variable">$params</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">app_end</span>(<span class="params">&amp;<span class="variable">$params</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>namespace app\index\behavior;</p><h1 id="下钩子"><a href="#下钩子" class="headerlink" title="下钩子"></a>下钩子</h1><pre><code>Hook:listen(&#39;钩子名称&#39;,&#39;参数&#39;,&#39;是否只有一次有效返回值&#39;)</code></pre><h1 id="hook-基本实现"><a href="#hook-基本实现" class="headerlink" title="hook 基本实现"></a>hook 基本实现</h1><p>hook::listen 下钩子  具体实现  判断当前的钩子名称 是否在 tag 中定义 ，<br>有就执行，没有就返回空<br>其中hook::exec 方法是具体的执行钩子</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;系统预留钩子&quot;&gt;&lt;a href=&quot;#系统预留钩子&quot; class=&quot;headerlink&quot; title=&quot;系统预留钩子&quot;&gt;&lt;/a&gt;系统预留钩子&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;app_init        应用初始化标签位
app_dispatch    应用调度标</summary>
      
    
    
    
    <category term="PHP开发" scheme="http://example.com/categories/PHP%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="PHP开发" scheme="http://example.com/tags/PHP%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>php开发-注册登录</title>
    <link href="http://example.com/posts/a634ca62.html"/>
    <id>http://example.com/posts/a634ca62.html</id>
    <published>2024-03-18T07:43:30.000Z</published>
    <updated>2024-03-19T11:16:52.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、验证码"><a href="#一、验证码" class="headerlink" title="一、验证码"></a>一、验证码</h1><h2 id="1-1-生成"><a href="#1-1-生成" class="headerlink" title="1.1 生成"></a>1.1 生成</h2><h3 id="随机字符串-方案"><a href="#随机字符串-方案" class="headerlink" title="随机字符串 方案"></a>随机字符串 方案</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$codeset</span>= <span class="string">&quot;2345678abcdefhijkmnpqrstuvwxyzABCDEFGHJKLMNPQRTUVWXY</span></span><br><span class="line"><span class="string"> for (<span class="subst">$i</span> = 0; <span class="subst">$i</span> &lt; <span class="subst">$length</span>; <span class="subst">$i</span>++) &#123;</span></span><br><span class="line"><span class="string">        <span class="subst">$code</span>[<span class="subst">$i</span>] = <span class="subst">$codeSet</span>[mt_rand(0, strlen(<span class="subst">$codeset</span>) - 1)];</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"> return <span class="subst">$code</span>;</span></span><br></pre></td></tr></table></figure><h3 id="加减法-方案"><a href="#加减法-方案" class="headerlink" title="加减法 方案"></a>加减法 方案</h3><h3 id="拖动拼图方案"><a href="#拖动拼图方案" class="headerlink" title="拖动拼图方案"></a>拖动拼图方案</h3><h2 id="1-2-存储验证码"><a href="#1-2-存储验证码" class="headerlink" title="1.2 存储验证码"></a>1.2 存储验证码</h2><p>   cookie session </p><h2 id="1-3-验证验证码"><a href="#1-3-验证验证码" class="headerlink" title="1.3 验证验证码"></a>1.3 验证验证码</h2><p>  session</p><h1 id="二、注册方式"><a href="#二、注册方式" class="headerlink" title="二、注册方式"></a>二、注册方式</h1><h2 id="用户名-密码-邮箱注册"><a href="#用户名-密码-邮箱注册" class="headerlink" title="用户名+密码+邮箱注册"></a>用户名+密码+邮箱注册</h2><h3 id="注册处理"><a href="#注册处理" class="headerlink" title="注册处理"></a>注册处理</h3><pre><code>存储数据库 过期没激活 删除  url 中加个唯一的key  发送邮件</code></pre><h3 id="激活模块"><a href="#激活模块" class="headerlink" title="激活模块"></a>激活模块</h3><pre><code>根据  url 中唯一的key 查询处理</code></pre><h2 id="用户名-密码-手机验证码"><a href="#用户名-密码-手机验证码" class="headerlink" title="用户名+密码+手机验证码"></a>用户名+密码+手机验证码</h2><pre><code>生成验证码 存储  然后发送短信</code></pre><h2 id="第三方注册"><a href="#第三方注册" class="headerlink" title="第三方注册"></a>第三方注册</h2><h1 id="登录方式"><a href="#登录方式" class="headerlink" title="登录方式"></a>登录方式</h1><h2 id="用户名-密码"><a href="#用户名-密码" class="headerlink" title="用户名+密码"></a>用户名+密码</h2><p>基于cookie+session </p><h2 id="手机号-验证码-手机验证码"><a href="#手机号-验证码-手机验证码" class="headerlink" title="手机号+验证码+手机验证码"></a>手机号+验证码+手机验证码</h2><p>PC端 前后端不分离 手机号码 + 验证码  基于cookie+session </p><p>移动端 token 方式 用户名密码 验证成功 就生成$token<br>然后$token+$user_id 绑定<br>生成token 示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取全球唯一标识</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">uuid</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> sprintf(</span><br><span class="line">          <span class="string">&#x27;%04x%04x-%04x-%04x-%04x-%04x%04x%04x&#x27;</span>,</span><br><span class="line">          mt_rand(<span class="number">0</span>, <span class="number">0xffff</span>),</span><br><span class="line">          mt_rand(<span class="number">0</span>, <span class="number">0xffff</span>),</span><br><span class="line">          mt_rand(<span class="number">0</span>, <span class="number">0xffff</span>),</span><br><span class="line">          mt_rand(<span class="number">0</span>, <span class="number">0x0fff</span>) | <span class="number">0x4000</span>,</span><br><span class="line">          mt_rand(<span class="number">0</span>, <span class="number">0x3fff</span>) | <span class="number">0x8000</span>,</span><br><span class="line">          mt_rand(<span class="number">0</span>, <span class="number">0xffff</span>),</span><br><span class="line">          mt_rand(<span class="number">0</span>, <span class="number">0xffff</span>),</span><br><span class="line">          mt_rand(<span class="number">0</span>, <span class="number">0xffff</span>)</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="本机号码一键登录"><a href="#本机号码一键登录" class="headerlink" title="本机号码一键登录"></a>本机号码一键登录</h2><h2 id="第三方授权登录"><a href="#第三方授权登录" class="headerlink" title="第三方授权登录"></a>第三方授权登录</h2><h2 id="手机号-验证码-绑定第三方授权"><a href="#手机号-验证码-绑定第三方授权" class="headerlink" title="手机号+验证码+绑定第三方授权"></a>手机号+验证码+绑定第三方授权</h2><h2 id="记住功能"><a href="#记住功能" class="headerlink" title="记住功能"></a>记住功能</h2><p>设置session的保存时长</p><h1 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h1><h2 id="直接基于Cookie与Session实现单点登录"><a href="#直接基于Cookie与Session实现单点登录" class="headerlink" title="直接基于Cookie与Session实现单点登录"></a>直接基于Cookie与Session实现单点登录</h2><h2 id="基于CAS方案实现单点登录"><a href="#基于CAS方案实现单点登录" class="headerlink" title="基于CAS方案实现单点登录"></a>基于CAS方案实现单点登录</h2><h2 id="基于OAuth方案实现单点登录"><a href="#基于OAuth方案实现单点登录" class="headerlink" title="基于OAuth方案实现单点登录"></a>基于OAuth方案实现单点登录</h2><h1 id="多终端设备的用户互踢"><a href="#多终端设备的用户互踢" class="headerlink" title="多终端设备的用户互踢"></a>多终端设备的用户互踢</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、验证码&quot;&gt;&lt;a href=&quot;#一、验证码&quot; class=&quot;headerlink&quot; title=&quot;一、验证码&quot;&gt;&lt;/a&gt;一、验证码&lt;/h1&gt;&lt;h2 id=&quot;1-1-生成&quot;&gt;&lt;a href=&quot;#1-1-生成&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux环境编译安装总结</title>
    <link href="http://example.com/posts/1b78fbfa.html"/>
    <id>http://example.com/posts/1b78fbfa.html</id>
    <published>2024-03-06T07:41:02.000Z</published>
    <updated>2024-03-06T08:04:05.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="make-很慢"><a href="#make-很慢" class="headerlink" title="make 很慢"></a>make 很慢</h1><p>make -j4   表示同时运行4个编译任务</p><p>编译任务数  一般情况是cpu 核心的一半</p><h1 id="make遇到语法错误"><a href="#make遇到语法错误" class="headerlink" title="make遇到语法错误"></a>make遇到语法错误</h1><p>大概率是gcc 版本高了或者低了</p><p>安装示例</p><pre><code>wget https://mirrors.tuna.tsinghua.edu.cn/gnu/gcc/gcc-8.2.0/gcc-8.2.0.tar.gztar -zxvf gcc-8.2.0.tar.gz./contrib/download_prerequisitesmkdir buildcd bulid../configure --prefix=/usr/local/gcc-8.2.0 --enable-bootstrap --enable-checking=release --enable-languages=c,c++ --disable-multilibmake make installecho -e &#39;\nexport PATH=/usr/local/gcc-8.2.0/bin:$PATH\n&#39; &gt;&gt; /etc/profile.d/gcc.sh &amp;&amp; source /etc/profile.d/gcc.shln -sv /usr/local/gcc-8.2.0/include/ /usr/include/gccldconfig -vldconfig -p |grep gccgcc -v</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;make-很慢&quot;&gt;&lt;a href=&quot;#make-很慢&quot; class=&quot;headerlink&quot; title=&quot;make 很慢&quot;&gt;&lt;/a&gt;make 很慢&lt;/h1&gt;&lt;p&gt;make -j4   表示同时运行4个编译任务&lt;/p&gt;
&lt;p&gt;编译任务数  一般情况是cpu 核心的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux配置代理</title>
    <link href="http://example.com/posts/42347bce.html"/>
    <id>http://example.com/posts/42347bce.html</id>
    <published>2024-03-01T09:29:34.000Z</published>
    <updated>2024-03-06T08:04:05.067Z</updated>
    
    <content type="html"><![CDATA[<p>#设置wget</p><p>编辑文件为：/etc/wgetrc[全局配置文件]  ~/.wgetrc[用户配置文件] 添加下面两行：</p><p>http_proxy=<a href="http://111.112.113.114:8080/">http://111.112.113.114:8080</a><br>https_proxy=<a href="http://111.112.113.114:8080/">http://111.112.113.114:8080</a></p><p>更新一下环境文件：<br>source /etc/wgetrc</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#设置wget&lt;/p&gt;
&lt;p&gt;编辑文件为：/etc/wgetrc[全局配置文件]  ~/.wgetrc[用户配置文件] 添加下面两行：&lt;/p&gt;
&lt;p&gt;http_proxy=&lt;a href=&quot;http://111.112.113.114:8080/&quot;&gt;http://111.1</summary>
      
    
    
    
    
  </entry>
  
</feed>
