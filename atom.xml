<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yszhao的博客</title>
  
  <subtitle>记录我的生活 学习</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-25T08:29:31.815Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>yszhao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>php常用函数总结</title>
    <link href="http://example.com/2023/07/25/php%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/07/25/php%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</id>
    <published>2023-07-25T07:54:20.000Z</published>
    <updated>2023-07-25T08:29:31.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、字符串处理函数"><a href="#一、字符串处理函数" class="headerlink" title="一、字符串处理函数"></a>一、字符串处理函数</h1><h2 id="1-1-str-pad"><a href="#1-1-str-pad" class="headerlink" title="1.1 str_pad()"></a>1.1 str_pad()</h2><p>str_pad(【必填 需要处理的字符串】,【必填 填充的长度】，【 可选 填充的字符串，默认空白】，【可选 填充字符串的哪边】)</p><pre><code>规定填充字符串的哪边 可能的值：STR_PAD_BOTH - 填充字符串的两侧。如果不是偶数，则右侧获得额外的填充。STR_PAD_LEFT - 填充字符串的左侧。STR_PAD_RIGHT - 填充字符串的右侧。这是默认的。</code></pre><p>示例 $str=10 ; echo str_pad($str,4,”0”,STR_PAD_LEFT);  <font color="red">意思就4位长度 不够就往左边补0</font></p><h2 id="2-1-strpos、stripos-、strrpos"><a href="#2-1-strpos、stripos-、strrpos" class="headerlink" title="2.1 strpos、stripos 、strrpos"></a>2.1 strpos、stripos 、strrpos</h2><h2 id="2-3-substr"><a href="#2-3-substr" class="headerlink" title="2.3 substr"></a>2.3 substr</h2><h2 id="2-4-strtolower-strtouplower-strlen-mb-strlen-trim-ltrim-rtrim-explode-implode常用"><a href="#2-4-strtolower-strtouplower-strlen-mb-strlen-trim-ltrim-rtrim-explode-implode常用" class="headerlink" title="2.4 strtolower strtouplower strlen mb_strlen trim ltrim rtrim explode implode常用"></a>2.4 strtolower strtouplower strlen mb_strlen trim ltrim rtrim explode implode常用</h2><pre><code>比较常用，不在赘述</code></pre><h1 id="二、数组处理函数"><a href="#二、数组处理函数" class="headerlink" title="二、数组处理函数"></a>二、数组处理函数</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、字符串处理函数&quot;&gt;&lt;a href=&quot;#一、字符串处理函数&quot; class=&quot;headerlink&quot; title=&quot;一、字符串处理函数&quot;&gt;&lt;/a&gt;一、字符串处理函数&lt;/h1&gt;&lt;h2 id=&quot;1-1-str-pad&quot;&gt;&lt;a href=&quot;#1-1-str-pad&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>跨域问题总结</title>
    <link href="http://example.com/2023/07/21/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/07/21/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2023-07-21T08:26:13.000Z</published>
    <updated>2023-07-21T08:26:13.871Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>session和cookie</title>
    <link href="http://example.com/2023/07/21/session%E5%92%8Ccookie/"/>
    <id>http://example.com/2023/07/21/session%E5%92%8Ccookie/</id>
    <published>2023-07-21T08:25:34.000Z</published>
    <updated>2023-07-21T08:25:34.576Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux服务之crond</title>
    <link href="http://example.com/2023/07/19/Linux%E6%9C%8D%E5%8A%A1%E4%B9%8Bcrond/"/>
    <id>http://example.com/2023/07/19/Linux%E6%9C%8D%E5%8A%A1%E4%B9%8Bcrond/</id>
    <published>2023-07-19T06:20:19.000Z</published>
    <updated>2023-07-19T09:32:19.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Cron介绍"><a href="#一、Cron介绍" class="headerlink" title="一、Cron介绍"></a>一、Cron介绍</h1><p>Cron被用来进行Linux系统的计划任务执行</p><h1 id="二、相关目录"><a href="#二、相关目录" class="headerlink" title="二、相关目录"></a>二、相关目录</h1><p>cron.d/*用来存放一些软件的Cron设置</p><p>cron.daily/每天执行一次的任务</p><p>cron.hourly/每小时执行一次的任务</p><p>cron.monthly/每个月执行一次的任务</p><p>cron.weekly/，每周执行一次的任务</p><p>每分钟执行一次脚本</p><pre><code>crontab -e</code></pre><h1 id="三、crontab使用"><a href="#三、crontab使用" class="headerlink" title="三、crontab使用"></a>三、crontab使用</h1><pre><code>*  *  *   *  *  命令/脚本分 时 日 月 周1  *  *   *  *  命令/脚本   指的是每个小时的第一分钟*/1 * * * *     命令/脚本   每分钟执行脚本crontab -l查看计划任务列表   </code></pre><h1 id="四、-etc-cron-daily-与crontab-e-定义的区别"><a href="#四、-etc-cron-daily-与crontab-e-定义的区别" class="headerlink" title="四、/etc/cron.daily 与crontab -e 定义的区别"></a>四、/etc/cron.daily 与crontab -e 定义的区别</h1><pre><code>/etc/cron.daily 和 crontab -e 都是用来设置定时任务的方式，但它们有一些不同之处。/etc/cron.daily 是一个目录，里面存放着以 &quot;cron&quot; 格式命名的脚本文件。这些脚本会每天执行一次，通常在系统闲置时执行。这个目录中的脚本是全局的，适用于整个系统的所有用户。而 crontab -e 则是一个命令，用于编辑和管理用户个人的 crontab 文件。crontab 文件中定义了用户的定时任务计划。通过编辑 crontab 文件，用户可以设置自己的定时任务，包括每天、每周、每月或其他时间间隔的执行。因此，主要区别在于：/etc/cron.daily 适用于全局系统级别的定时任务，而 crontab -e 是用户级别的定时任务。/etc/cron.daily 中的脚本在每天执行一次，而 crontab -e 可以更精确地设置时间间隔。/etc/cron.daily 中的脚本对所有用户有效，而 crontab -e 只对当前用户有效。需要注意的是，修改 /etc/cron.daily 目录中的文件需要 root 权限，而 crontab -e 只需要用户自己的权限</code></pre><h1 id="五、Linux-anacron"><a href="#五、Linux-anacron" class="headerlink" title="五、Linux anacron"></a>五、Linux anacron</h1><p> 执行由于关机  忘记执行的任务</p><p> 配置好 /etc/anacrontab 文件</p><p> 更具体学习参考<a href="http://c.biancheng.net/view/1095.html">http://c.biancheng.net/view/1095.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Cron介绍&quot;&gt;&lt;a href=&quot;#一、Cron介绍&quot; class=&quot;headerlink&quot; title=&quot;一、Cron介绍&quot;&gt;&lt;/a&gt;一、Cron介绍&lt;/h1&gt;&lt;p&gt;Cron被用来进行Linux系统的计划任务执行&lt;/p&gt;
&lt;h1 id=&quot;二、相关目录&quot;&gt;&lt;a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>守护进程-supervisor</title>
    <link href="http://example.com/2023/07/19/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B-supervisor/"/>
    <id>http://example.com/2023/07/19/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B-supervisor/</id>
    <published>2023-07-19T03:38:09.000Z</published>
    <updated>2023-07-19T03:40:33.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><pre><code>yum install supervisor    #centos 系统apt install supervisor    #ubuntu 系统</code></pre><h1 id="二、配置守护进程"><a href="#二、配置守护进程" class="headerlink" title="二、配置守护进程"></a>二、配置守护进程</h1><p><font color='red'>在/etc/supervisord.d/下新建后缀名为ini的文件</font></p><pre><code>; 设置进程的名称，使用 supervisorctl 来管理进程时需要使用该进程名[program:myblog] directory = /home/web/myblog          ; 程序的启动目录command=./start.sh start              ; 启动命令 最好绝对路径autostart = true                      ; 在 supervisord 启动的时候也自动启动numprocs=1                            ; 默认为1RestartSec=30process_name=%(program_name)s         ; 默认为 %(program_name)s，即 [program:x] 中的 xuser=root                             ; 使用 root 用户来启动该进程autorestart=true                      ; 程序崩溃时自动重启，重启次数是有限制的，默认为3次redirect_stderr=true                  ; 重定向输出的日志stderr_logfile= /home/web/myblog/myblog_stderr.logstdout_logfile = /home/web/myblog/myblog_stdout.logloglevel=info</code></pre><h1 id="三、supervisord管理"><a href="#三、supervisord管理" class="headerlink" title="三、supervisord管理"></a>三、supervisord管理</h1><pre><code>systemctl status  supervisordsystemctl start  supervisord  systemctl stop  supervisord  systemctl restart  supervisord  </code></pre><h1 id="四、supervisorctl管理"><a href="#四、supervisorctl管理" class="headerlink" title="四、supervisorctl管理"></a>四、supervisorctl管理</h1><pre><code>supervisorctl start server:myblog</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;yum install supervisor    #centos 系统

apt install supe</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>jenkins-发布php项目</title>
    <link href="http://example.com/2023/07/19/jenkins-%E5%8F%91%E5%B8%83php%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2023/07/19/jenkins-%E5%8F%91%E5%B8%83php%E9%A1%B9%E7%9B%AE/</id>
    <published>2023-07-19T01:16:30.000Z</published>
    <updated>2023-07-19T01:16:30.944Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>linux系统后台运行任务</title>
    <link href="http://example.com/2023/07/19/linux%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E4%BB%BB%E5%8A%A1/"/>
    <id>http://example.com/2023/07/19/linux%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E4%BB%BB%E5%8A%A1/</id>
    <published>2023-07-19T01:15:25.000Z</published>
    <updated>2023-07-19T01:15:25.544Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>php扩展编译安装</title>
    <link href="http://example.com/2023/07/19/php%E6%89%A9%E5%B1%95%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2023/07/19/php%E6%89%A9%E5%B1%95%E5%AE%89%E8%A3%85/</id>
    <published>2023-07-19T01:14:51.000Z</published>
    <updated>2023-07-19T03:24:39.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、找点phpize-和-php-config路径"><a href="#一、找点phpize-和-php-config路径" class="headerlink" title="一、找点phpize 和 php-config路径"></a>一、找点phpize 和 php-config路径</h1><pre><code>find / -name phpizefind / -name php-config</code></pre><h1 id="二、找到"><a href="#二、找到" class="headerlink" title="二、找到"></a>二、找到</h1><p>项目目录下执行 查找到的phpize </p><pre><code>/opt/remi/php74/root/usr/bin/phpize如报错Can&#39;t find PHP headers in /usr/include/php The php-devel package is required for use of this command...安装php-devel即可yum install -y php-develremi安装如下安装yum install -y php73-php-devel</code></pre><h1 id="三、编译"><a href="#三、编译" class="headerlink" title="三、编译"></a>三、编译</h1><pre><code> 1.进入项目目录下 ./configure --with-php-config=【第一步查询到的路径】  示例    ./configure --with-php-config=/www/server/php/71/bin/php-config 2. 执行  make &amp;&amp; make install</code></pre><h1 id="四、添加配置"><a href="#四、添加配置" class="headerlink" title="四、添加配置"></a>四、添加配置</h1><pre><code>vi /具体路径/php.ini extension=swoole.so如是remi 安装的php 在/etc/opt/remi/php73/php.d下新建新建ini文件  参考其他设置下万变方案 phpinfo 看下是如何加载扩展的 具体的目录 多有</code></pre><h1 id="五、重启服务"><a href="#五、重启服务" class="headerlink" title="五、重启服务"></a>五、重启服务</h1><pre><code>systemctl restart php-fpm   </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、找点phpize-和-php-config路径&quot;&gt;&lt;a href=&quot;#一、找点phpize-和-php-config路径&quot; class=&quot;headerlink&quot; title=&quot;一、找点phpize 和 php-config路径&quot;&gt;&lt;/a&gt;一、找点phpize </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx之logrotate</title>
    <link href="http://example.com/2023/07/19/nginx%E4%B9%8Blogrotate/"/>
    <id>http://example.com/2023/07/19/nginx%E4%B9%8Blogrotate/</id>
    <published>2023-07-19T01:14:27.000Z</published>
    <updated>2023-07-19T09:53:23.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、logrotate介绍"><a href="#一、logrotate介绍" class="headerlink" title="一、logrotate介绍"></a>一、logrotate介绍</h1><p>logrotate是centos自带命令，其他linux操作系统可能需要自行安装，用来进行日志切割和定期删除，</p><p>简单来说就是将某个日志文件按照时间或大小分割成多份，删除时间久远的日志。</p><h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><pre><code>yum install -y logrotate     #centos 系统apt install -y logrotate    #ubuntu 系统</code></pre><h1 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h1><p>/etc/logrotate.conf是全局配置</p><pre><code>#指定日志文件保留几个副本rotate 4# 指定当发生滚动后，创建一个新的空日志文件（权限不变）create# 指定滚动文件的后缀是当前的日期dateext  # 指定是否对滚动日志进行压缩#compress# 加载子配置include /etc/logrotate.d# 指定对特定文件的滚动规则/var/log/wtmp &#123;    monthly    create 0664 root utmp    minsize 1M  #指定文件小于1m就不滚动    rotate 1&#125;/var/log/btmp &#123;    missingok    monthly    create 0600 root utmp    rotate 1&#125;</code></pre><p>/etc/logrotate.d/*（子配置）</p><h1 id="三、执行"><a href="#三、执行" class="headerlink" title="三、执行"></a>三、执行</h1><p>方案一<br>    通过 /etc/cron.daily/logrotate 配置<br>方案二<br>    crontab -e写入，内容为“  59 23 * * * /usr/sbin/logrotate -f /home/zmq/daily_logrotate  </p><h1 id="四、具体的配置文件"><a href="#四、具体的配置文件" class="headerlink" title="四、具体的配置文件"></a>四、具体的配置文件</h1><pre><code>/var/log/nginx/*.log &#123;          daily          missingok          rotate 52          compress          delaycompress          notifempty          create 640 nginx adm          sharedscripts          postrotate                 if [ -f /var/run/nginx.pid ]; then                         kill -USR1 `cat /var/run/nginx.pid`                 fi          endscript &#125;    /var/opt/remi/php71/log/php-fpm/*log &#123;        missingok        notifempty        sharedscripts        delaycompress        postrotate            /bin/kill -SIGUSR1 `cat /var/opt/remi/php71/run/php-fpm/php-fpm.pid 2&gt;/dev/null` 2&gt;/dev/null ||     true        endscript  &#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、logrotate介绍&quot;&gt;&lt;a href=&quot;#一、logrotate介绍&quot; class=&quot;headerlink&quot; title=&quot;一、logrotate介绍&quot;&gt;&lt;/a&gt;一、logrotate介绍&lt;/h1&gt;&lt;p&gt;logrotate是centos自带命令，其他lin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hj212环保协议-2007</title>
    <link href="http://example.com/2023/07/13/hj212%E7%8E%AF%E4%BF%9D%E5%8D%8F%E8%AE%AE-2007/"/>
    <id>http://example.com/2023/07/13/hj212%E7%8E%AF%E4%BF%9D%E5%8D%8F%E8%AE%AE-2007/</id>
    <published>2023-07-13T12:08:15.000Z</published>
    <updated>2023-07-13T12:08:15.753Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>shell脚本学习1</title>
    <link href="http://example.com/2023/07/13/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A01/"/>
    <id>http://example.com/2023/07/13/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A01/</id>
    <published>2023-07-13T11:57:19.000Z</published>
    <updated>2023-07-13T11:57:19.015Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx-vhost-安全配置模版</title>
    <link href="http://example.com/2023/07/13/nginx-vhost-%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E6%A8%A1%E7%89%88/"/>
    <id>http://example.com/2023/07/13/nginx-vhost-%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E6%A8%A1%E7%89%88/</id>
    <published>2023-07-13T11:11:30.000Z</published>
    <updated>2023-07-13T11:12:24.875Z</updated>
    
    <content type="html"><![CDATA[<p>#nginx-vhost-安全配置模版</p><pre><code>server&#123;        listen 443 ssl ;        server_name  [域名或者ip];        index        index.php index.html index.htm;        root [项目路径];        access_log  /var/log/nginx/[项目名称].access.log;        error_log   /var/log/nginx/[项目名称].error.log;        #证书文件名称        ssl_certificate [证书路径 公钥];        #私钥文件名称        ssl_certificate_key [证书路径 私钥];        ssl_session_timeout 5m;        #请按照以下协议配置        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;        #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;        ssl_prefer_server_ciphers on        #允许cookie        add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;        #安全头        add_header X-Xss-header &quot;1;mode=block&quot;;        add_header Set-Cookie &quot;HttpOnly&quot;;        add_header Set-Cookie &quot;Secure&quot;;        add_header X-Frame-Options &quot;SAMEORIGIN&quot;;        location ~ \.(json|lock|git)$ &#123;                 deny all;        &#125;        location ~ ^/(uploads|assets)/.*\.(php|php5|jsp|shtml)$ &#123;            deny all;        &#125;        location ~ .*\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx)$ &#123;            add_header Content-Disposition attachment;        &#125;        location =/assets/libs/bootstrap/Gemfile &#123;                       return 404;        &#125;        location ~ /\. &#123;            deny  all;        &#125;        location / &#123;                proxy_cookie_path / &quot;/; httponly; secure; SameSite=None&quot;;                if (!-e $request_filename) &#123;                        rewrite  ^(.*)$  /index.php?s=/$1  last;                        break;                &#125;        &#125;        location ~ \.php(.*)$ &#123;                fastcgi_pass   [访问php方式];                fastcgi_index  index.php;                fastcgi_split_path_info  ^((?U).+\.php)(/?.+)$;                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;                fastcgi_param  PATH_INFO  $fastcgi_path_info;                fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;                include        fastcgi_params;        &#125;        #timeout        large_client_header_buffers 4 16k;        client_max_body_size 180m;        client_body_buffer_size 128k;        fastcgi_connect_timeout 600;        fastcgi_read_timeout 600;        fastcgi_send_timeout 600;        fastcgi_buffer_size 128k;        fastcgi_buffers   2 256k;        fastcgi_busy_buffers_size 256k;        fastcgi_temp_file_write_size 256k;        proxy_read_timeout  240s;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#nginx-vhost-安全配置模版&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server&amp;#123;
        listen 443 ssl ;
        server_name  [域名或者ip];
        index        index.php in</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>fail2ban软件使用</title>
    <link href="http://example.com/2023/07/09/fail2ban%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2023/07/09/fail2ban%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/</id>
    <published>2023-07-09T06:19:39.000Z</published>
    <updated>2023-07-13T12:27:58.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><pre><code>CentOS 中使用fail2ban和firewalld限制IP拦截cc攻击</code></pre><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre><code>yum -y install fail2ban</code></pre><h1 id="新建规则"><a href="#新建规则" class="headerlink" title="新建规则"></a>新建规则</h1><pre><code>/etc/fail2ban/filter.d/  编写过滤规则的目录 vi /etc/fail2ban/filter.d/nginx-cc.conf[Definition]#failregex = &lt;HOST&gt;-.*-.*HTTP/1.*(404|301|503).*$failregex = ^&lt;HOST&gt; -.*&quot;(GET|POST).* HTTP\/.*$ignoreregex =</code></pre><h1 id="正则规则检查"><a href="#正则规则检查" class="headerlink" title="正则规则检查"></a>正则规则检查</h1><pre><code>fail2ban-regex /var/log/nginx/access.log &quot;&lt;HOST&gt; -.*- .*HTTP/1.* .* .*$&quot;  </code></pre><h1 id="根据配置文件检查"><a href="#根据配置文件检查" class="headerlink" title="根据配置文件检查"></a>根据配置文件检查</h1><pre><code>fail2ban-regex /var/log/nginx/access.log /etc/fail2ban/filter.d/nginx-cc.conf  </code></pre><h1 id="控制规则配置文件"><a href="#控制规则配置文件" class="headerlink" title="控制规则配置文件"></a>控制规则配置文件</h1><pre><code>[DEFAULT]ignoreip = 127.0.0.1/8  117.89.130.84 117.89.134.183/16  218.2.244.241/16 49.82.132.215/16 122.195.252.237/16 114.238.64.157/16 180.110.114.152/16#放行的ip 可以带网段ignorecommand =bantime  = 60#屏蔽时间，-1是永久屏蔽findtime  = 60#设置限定时间内超过 最大尝试次数 限制次数即被封锁maxretry = 5#最大尝试次数backend = auto#日志修改后检测机制usedns = warn#ssh链接加速logencoding = autoenabled = false[sshd]## 分类设置（基于 SSHD 服务的防护） enabled = true## 是否开启防护，false 为关闭 filter = sshd## 过滤规则 filter 名称，对应 filter.d 目录下的 sshd.conf  action   = iptables[name=SSH, port=22, protocol=tcp] #《###action = iptables[name=SSH, port=ssh, protocol=tcp] ## 动作参数#sendmail-whois[name=SSH, dest=you@example.com, sender=fail2ban@example.com,   sendername=&quot;Fail2Ban&quot;]## 邮件通知参数## 收件人地址           ## 发件人地址####》   这是个例子 logpath = /var/log/secure## 检测系统登陆日志文件 maxretry = 3## 最大尝试次数banaction=iptables-allportsbantime = 3600[nginx-cc] #过滤规则名称 下方就是 规律规则 相关 限制条件enabled = trueport=http,httpsfilter = nginx-ccfindtime = 1#1秒钟检查一次maxretry = 100#最多100个bantime = 3600#封锁ip的时间banaction=iptables-multiport#匹配的哪些日志文件logpath = /var/log/nginx/*access.log          /var/log/nginx/access.log</code></pre><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><pre><code>#启动systemctl start fail2ban#停止systemctl stop fail2ban#查看具体规则限制了哪些ipfail2ban-client status 规则名称示例：   fail2ban-client status nginx-cc#解封某条过滤规则封锁的ipfail2ban-client set nginx-cc unbanip  112.84.237.102</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;CentOS 中使用fail2ban和firewalld限制IP拦截cc攻击
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;安</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web安全</title>
    <link href="http://example.com/2023/07/09/web%E5%AE%89%E5%85%A8/"/>
    <id>http://example.com/2023/07/09/web%E5%AE%89%E5%85%A8/</id>
    <published>2023-07-09T06:16:41.000Z</published>
    <updated>2023-07-13T06:20:53.705Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>openEuler搭建lnmp</title>
    <link href="http://example.com/2023/07/09/openEuler%E6%90%AD%E5%BB%BAlnmp/"/>
    <id>http://example.com/2023/07/09/openEuler%E6%90%AD%E5%BB%BAlnmp/</id>
    <published>2023-07-09T06:04:46.000Z</published>
    <updated>2023-07-13T11:09:13.709Z</updated>
    
    <content type="html"><![CDATA[<p>#openEuler搭建lnmp</p><p>##安装php<br>wget <a href="https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</a></p><p>rpm -ivh –nodeps epel-release-latest-7.noarch.rp</p><p>wget <a href="https://rpms.remirepo.net/enterprise/remi-release-7.rpm">https://rpms.remirepo.net/enterprise/remi-release-7.rpm</a></p><p>rpm -ivh –nodeps remi-release-7.rpm </p><p>yum-config-manager –enable remi-php73</p><p>yum install php73 php73-php-fpm php73-php-opcache php73-php-gd php73-php-mbstring php73-php-xml php73-php-pdo php73-php-mysqlnd php73-php-pecl-mysql php73-php-bcmath</p><p>##rpm包安装mysql</p><pre><code>Error:  Problem: cannot install the best candidate for the job  - nothing provides libcrypto.so.10()(64bit) needed by php73-php-fpm-7.3.33-10.el7.remi.x86_64  - nothing provides libssl.so.10()(64bit) needed by php73-php-fpm-7.3.33-10.el7.remi.x86_64  - nothing provides libcrypto.so.10(libcrypto.so.10)(64bit) needed by php73-php-fpm-7.3.33-10.el7.remi.x86_64  - nothing provides libssl.so.10(libssl.so.10)(64bit) needed by php73-php-fpm-7.3.33-10.el7.remi.x86_64  - nothing provides libcrypto.so.10(OPENSSL_1.0.1_EC)(64bit) needed by php73-php-fpm-7.3.33-10.el7.remi.x86_64  - nothing provides libcrypto.so.10(OPENSSL_1.0.2)(64bit) needed by php73-php-fpm-7.3.33-10.el7.remi.x86_64  </code></pre><p>此报错处理办法      </p><pre><code>yum install compat-openssl10yum install http://mirror.centos.org/centos/8-stream/AppStream/x86_64/os/Packages/compat-openssl10-1.0.2o-3.el8.x86_64.rpm</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#openEuler搭建lnmp&lt;/p&gt;
&lt;p&gt;##安装php&lt;br&gt;wget &lt;a href=&quot;https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm&quot;&gt;https://dl.fedor</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ubuntu搭建lnmp环境</title>
    <link href="http://example.com/2023/07/09/ubuntn%E6%90%AD%E5%BB%BAlnmp%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2023/07/09/ubuntn%E6%90%AD%E5%BB%BAlnmp%E7%8E%AF%E5%A2%83/</id>
    <published>2023-07-09T06:01:25.000Z</published>
    <updated>2023-07-13T06:20:53.705Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>docker学习3</title>
    <link href="http://example.com/2023/07/09/docker%E5%AD%A6%E4%B9%A03/"/>
    <id>http://example.com/2023/07/09/docker%E5%AD%A6%E4%B9%A03/</id>
    <published>2023-07-09T06:00:02.000Z</published>
    <updated>2023-07-13T06:20:53.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-compose使用"><a href="#docker-compose使用" class="headerlink" title="docker-compose使用"></a>docker-compose使用</h1><h2 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker-compose使用&quot;&gt;&lt;a href=&quot;#docker-compose使用&quot; class=&quot;headerlink&quot; title=&quot;docker-compose使用&quot;&gt;&lt;/a&gt;docker-compose使用&lt;/h1&gt;&lt;h2 id=&quot;docker-co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker学习2</title>
    <link href="http://example.com/2023/07/08/docker%E5%AD%A6%E4%B9%A02/"/>
    <id>http://example.com/2023/07/08/docker%E5%AD%A6%E4%B9%A02/</id>
    <published>2023-07-08T13:54:55.000Z</published>
    <updated>2023-07-13T06:20:53.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile-学习"><a href="#Dockerfile-学习" class="headerlink" title="Dockerfile 学习"></a>Dockerfile 学习</h1><h2 id="相关语法"><a href="#相关语法" class="headerlink" title="相关语法"></a>相关语法</h2><pre><code>FROM  scratchADD hello /CMD [&quot;/hello&quot;]</code></pre><h2 id="FROM语法"><a href="#FROM语法" class="headerlink" title="FROM语法"></a>FROM语法</h2><pre><code>FROM scratch   //制作  base imageFROM centos    //使用  base imageFROM ubuntu:14.4</code></pre><h2 id="LABEL语法"><a href="#LABEL语法" class="headerlink" title="LABEL语法"></a>LABEL语法</h2><pre><code>LABEL maintainer=&quot;xiaoquwl@gmail.com&quot;LABEL version=&quot;1.0&quot;LABEL description=&quot;This is description&quot;注：Metadata不可少</code></pre><h2 id="RUN-语法"><a href="#RUN-语法" class="headerlink" title="RUN 语法"></a>RUN 语法</h2><pre><code>RUN yum update &amp;&amp; yum install -y vim \python-dev 注：反斜杠换行RUN</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dockerfile-学习&quot;&gt;&lt;a href=&quot;#Dockerfile-学习&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile 学习&quot;&gt;&lt;/a&gt;Dockerfile 学习&lt;/h1&gt;&lt;h2 id=&quot;相关语法&quot;&gt;&lt;a href=&quot;#相关语法&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker学习1-Docker基础命令</title>
    <link href="http://example.com/2023/07/08/docker%E5%AD%A6%E4%B9%A01/"/>
    <id>http://example.com/2023/07/08/docker%E5%AD%A6%E4%B9%A01/</id>
    <published>2023-07-08T13:47:55.000Z</published>
    <updated>2023-07-13T06:20:53.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker基础命令"><a href="#Docker基础命令" class="headerlink" title="Docker基础命令"></a>Docker基础命令</h1><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><pre><code>Docker image ls </code></pre><h3 id="查看运行中的容器container"><a href="#查看运行中的容器container" class="headerlink" title="查看运行中的容器container"></a>查看运行中的容器container</h3><pre><code>docker ps      展示 正在运行的docker ps -a   所有  启动与未启动的 </code></pre><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><pre><code>docker run 容器名称示例：</code></pre><h3 id="查看运行中的容器container-1"><a href="#查看运行中的容器container-1" class="headerlink" title="查看运行中的容器container"></a>查看运行中的容器container</h3><pre><code>docker inspect  容器名称    查看容器信息</code></pre><h3 id="根据dockerfile-文件生成image"><a href="#根据dockerfile-文件生成image" class="headerlink" title="根据dockerfile 文件生成image"></a>根据dockerfile 文件生成image</h3><pre><code>Docker build -t tag/镜像名称   dockerfile所在目录    示例：    docker build -t test/hello-word .</code></pre><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><pre><code>docker rm 容器ID       docker rm $(docker container ls -aq)    删除所有容器docker rmi image名称   删除镜像</code></pre><h3 id="进入容器内"><a href="#进入容器内" class="headerlink" title="进入容器内"></a>进入容器内</h3><pre><code>docker exec -it 容器名 /bin/bash示例：docker exec it php71 /bin/bash</code></pre><h3 id="docker-镜像-导出导入【必须成对使用】"><a href="#docker-镜像-导出导入【必须成对使用】" class="headerlink" title="docker 镜像 导出导入【必须成对使用】"></a>docker 镜像 导出导入【必须成对使用】</h3><pre><code>docker export：导出容器docker import：导入容器为镜像docker save：导出镜像    -o:输出到的文件。    导出示例：        docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3        docker save ubuntu:load&gt;/root/ubuntu.tardocker load：导入镜像    -i：指定导出的文件    -q：精简输出信息        导入示例：        docker load -i ubuntu.tar        docker load &lt; ubuntu.tar</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker基础命令&quot;&gt;&lt;a href=&quot;#Docker基础命令&quot; class=&quot;headerlink&quot; title=&quot;Docker基础命令&quot;&gt;&lt;/a&gt;Docker基础命令&lt;/h1&gt;&lt;h3 id=&quot;查看镜像&quot;&gt;&lt;a href=&quot;#查看镜像&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux硬盘以及分区</title>
    <link href="http://example.com/2023/03/16/linux%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA/"/>
    <id>http://example.com/2023/03/16/linux%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA/</id>
    <published>2023-03-16T02:24:39.000Z</published>
    <updated>2023-07-13T09:47:34.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-硬盘分区基础知识"><a href="#一、-硬盘分区基础知识" class="headerlink" title="一、 硬盘分区基础知识"></a>一、 硬盘分区基础知识</h1><pre><code>磁盘分区类型：硬盘分区最常见的类型为msdos和gpt，前者表示MBR分区，而后者表示GPT分区。传统的BIOS只支持MBR分区硬盘启动，一个硬盘只能分成四个分区，并且单个分区最大不超过2TB。GPT(即GUID分区表)是源自EFI标准的一种较新的磁盘分区表结构的标准，是未来磁盘分区的主要形式。与MBR分区方式相比，突破MBR4个主分区限制，每个磁盘最多支持128个分区，持大于2T的分区，最大卷可达18EB。1、MBR分区：MBR的意思是“主引导记录”，它有自己的启动器，也就是启动代码，一旦启动代码被破坏，系统就没法启动，只有通过修复才能启动系统。最大支持2TB容量（T; terabytes,1TB=1024GB），对分区的设限：最多4个主分区或3个主分区加一个扩展分区。创建工具典型有fdisk。2、GPT分区：GPT意为GUID分区表，这是一个正逐渐取代MBR的新标准，它由UEFI辅住而形成的，这样就有了UEFI用于取代老旧的BIOS，而GPT则取代老旧的MBR。这个标准没有MBR的那些限制比如：容量2T限制、分区个数限制等。磁盘驱动器容量可以大得多，大到操作系统和文件系统都没法支持。它同时还支持几乎无限个分区数量，限制只在于操作系统，Windows支持最多128个GPT分区。GPT和MBR是不同的分区表类型。使用MBR分区表的硬盘最多只能划分4个主分区磁盘，并且MBR最大仅支持2TB的硬盘。如果需要分区的硬盘容量超过2TB了，则需要使用GPT分区表类型，此分区表类型不受分区个数、硬盘大小的限制。创建GPT分区典型工具有parted,gdisk,sgdisk等,fdisk不支持创建GPT分区。我们管理的服务器可能会随着业务量的不断增长而造成磁盘数据空间不足的情况（不考虑inode），这个时候我们就可能需要增加磁盘或挂载一些其他的块设备，这里我主要介绍如何使用fdisk分区工具创建磁盘分区和挂载分区。最重要的三步就是：1、创建主分区。（主分区创建之后可以马上被使用但不能再分区）2、创建扩展分区 (扩展分区必须再进行二次分区后才能被使用)3、在扩展分区上创建逻辑分区（扩充分区再分下去的是什么呢？它就是逻辑分区（Logical Partion））Linux下单个磁盘最多可以有15个分区。3个主分区 + 1个扩展分区 + 11个逻辑分区。建议的分区方法是：先分3个主分区，第四个分区为扩展分区，然后在扩展分区中再分成11个逻辑分区。在unix/linux系统中，一切都是文件。所有硬盘、软盘、键盘等设备都用文件来代表，对应 着/dev下面的文件。对于应用程序来说，可以像对待普通文件一样打开，关闭、读写这些设备文件。但是这种文件名，比如/dev/sda、/dev /raw/raw1都是用户空间名称，OS Kernel根本不知道这个名称指的是什么。在内核空间是通过major、minor device number 来区分设备的块设备也是通过/dev目录下的文件系统节点来访问。块设备上能够容纳文件系统。常见的块设备如磁盘、emmc flash、nand flash、 SD卡等。在linux系统中/dev目录下使用ls -l命令查看详细信息，第一个字母“b”为块设备文件的标识。/dev下每个块设备文件对应一个磁盘的分区。</code></pre><h1 id="二、创建分区"><a href="#二、创建分区" class="headerlink" title="二、创建分区"></a>二、创建分区</h1><pre><code>虽然支持mbr的硬盘（容量小于等于2T）分区表中最多能存储四个分区，但我们实际使用时一般只分为两个分区，一个是主分区（Primary Partion）一个是扩展分区(extended partition)两种，主分区可以马上被使用但不能再分区，扩展分区必须再进行分区后才能使用，也就是说它必须还要进行二次分区。那么由扩充分区再分下去的是什么呢？它就是逻辑分区（Logical Partion）。 对习惯于使用Dos或Windows的朋友来说，有几个分区就有几个驱动器，并且每个分区都会获得一个字母标识符，然后就可以选用这个字母来指定在这个分区上的文件和目录，它们的文件结构都是独立的，非常好理解。 因为对Linux用户来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构。 Linux中每个分区都是用来组成整个文件系统的一部分，因为它采用了一种叫“挂载点”的处理方法，它的整个文件系统中包含了一整套的文件和目录， 且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。   1、 fdisk -l 查看块设备情况（块设备包括硬盘，U盘，SD卡） </code></pre><h1 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h1><pre><code>虚拟文件系统(VFS) 操作模型，通过mkfs.xxx等这种系列性的命令创建格式化很多不同的文件系统，比如：mkfs.ext4 /dev/sda 、 mkfs.btrfs /dev/sdb等,但这些不同的文件系统都有各自的API接口，而用户想要的是，不管你是什么API，他们只关心mount/umount，或open/close等操作，等于屏蔽了底层的文件系统类型，运维层面只关心mount等操作即可。不同的文件系统类型有不同的特点，因而根据存储设备的硬件特性、系统需求等有不同的应用场合,什么意思呢，也就是说假如你用了不同设备都是硬盘，那么建立这个硬盘可以用不同的文件系统来做映射，可能就会获得不同的性能提升。还是要看相关的设备种类和厂商设计的目的。文件系统    描 述Ext    Linux 中最早的文件系统，由于在性能和兼容性上具有很多缺陷，现在已经很少使用,是为 Linux 核心所做的第一个文件系统，最大可支持 2GB 的文件系统。Ext2    是 Ext 文件系统的升级版本，Red Hat Linux 7.2 版本以前的系统默认都是 Ext2 文件系统。于 1993 年发布，        支持最大 16TB 的分区和最大 2TB 的文件（1TB=1024GB=1024x1024KB)        Linux正统的文件系统(如ext2、ext3)一个文件由目录项、inode和数据块组成。        目录项:包括文件名和inode节点号。        Inode：又称文件索引节点，是文件基本信息的存放地和数据块指针存放地。        数据块：文件的具体内容存放地。        将硬盘分区时会划分出目录块、inode Table区块和data block数据区域。一个文件由一个目录项、inode和数据区域块组成。        Inode包含文件的属性(如读写属性、owner等，以及指向数据块的指针)，数据区域块则是文件内容。        当查看某个文件时，会先从inode table中查出文件属性及数据存放点，再从数据块中读取数据Ext3    是 Ext2 文件系统的升级版本，最大的区别就是带日志功能，以便在系统突然停止时提高文件系统的可靠性。支持最大 16TB 的分区和最大 2TB 的文件Ext4    是 Ext3 文件系统的升级版。Ext4 在性能、伸缩性和可靠性方面进行了大量改进。Ext4 的变化可以说是翻天覆地的，        比如向下兼容 Ext3、最大 1EB 文件系统和 16TB 文件、无限数量子目录、Extents 连续数据块 概念、多块分配、延迟分配、        持久预分配、快速 FSCK、日志校验、无日志模式、在线碎片整理、inode 增强、        默认启用 barrier 等。它是 CentOS 6.3 的默认文件系统                xfs        被业界称为最先进、最具有可升级性的文件系统技术，由 SGI 公司设计，目前最新的 CentOS 7 版本默认使用的就是此文件系统。swap    swap 是 Linux 中用于交换分区的文件系统（类似于 Windows 中的虚拟内存)，当内存不够用时，使用交换分区暂时替代内存。一般大小为内存的 2 倍，但是不要超过 2GB。它是 Linux 的必需分区NFS    NFS 是网络文件系统（Network File System）的缩写，是用来实现不同主机之间文件共享的一种网络服务，本地主机可以通过挂载的方式使用远程共享的资源iso9660    光盘的标准文件系统。Linux 要想使用光盘，必须支持 iso9660 文件系统fat    就是 Windows 下的 fatl6 文件系统，在 Linux 中识别为 fatvfat    就是 Windows 下的 fat32 文件系统，在 Linux 中识别为 vfat。支持最大 32GB 的分区和最大 4GB 的文件</code></pre><p><font color='red'>VFAT 是一种早期的文件系统，通常用于与 Windows 系统兼容的可移动设备。由于 VFAT 文件系统不支持类似 UNIX 文件系统的权限和所有权概念，<br>因此在挂载后无法执行 chown 命令来更改文件和目录的所有者。</font></p><pre><code>NTFS    就是 Windows 下的 NTFS 文件系统，不过 Linux 默认是不能识别 NTFS 文件系统的，如果需要识别，则需要重新编译内核才能支持。        它比 fat32 文件系统更加安全，速度更快，支持最大 2TB 的分区和最大 64GB 的文件ufs    Sun 公司的操作系统 Solaris 和 SunOS 所采用的文件系统proc    Linux 中基于内存的虚拟文件系统，用来管理内存存储目录 /procsysfs    和 proc —样，也是基于内存的虚拟文件系统，用来管理内存存储目录 /sysfstmpfs    也是一种基于内存的虚拟文件系统，不过也可以使用 swap 交换分区现在一般是Ext4 xfs格式</code></pre><h1 id="分区工具"><a href="#分区工具" class="headerlink" title="分区工具"></a>分区工具</h1><pre><code>fdisk命令可以用于对2TB以内的磁盘进行添加、删除、转换分区的功能,用户可以根据实际情况进行合理划分。parted -l命令parted一款功能强大的磁盘分区和分区大小调整工具。parted -l同fdisk -l命令类似，但是它可以识别2TB以上的硬盘，也能查看 GPT 磁盘的分区</code></pre><p>#具体操作  </p><h2 id="基本命令介绍"><a href="#基本命令介绍" class="headerlink" title="基本命令介绍"></a>基本命令介绍</h2><pre><code>df -h      查看分区情况 相对比较直观      fdisk -l      查看系统有几块硬盘  分标有多大  分了那几个区            lsblklsblk -f  查看分区信息  -f更详细令可以列出所有可用块设备的信息,而且还能显示他们之间的依赖关系，但是它不会列出RAM盘的信息。块设备有硬盘,闪存盘,CD-ROM等等用 blkid  获取磁盘的uuid和属性</code></pre><h2 id="详细操作"><a href="#详细操作" class="headerlink" title="详细操作"></a>详细操作</h2><pre><code>分区1.fdisk   盘符    示例：fidisk /dev/sdb2.输入n 是创建分区（一般下面多是默认）3.然后选择分区类型                p   primary(主分区)                e   extende（扩展）                4.设置分区号（一般默认）                5.然后设置     起始扇区              结束扇区                  6.设置完 输入w    保存     7.特殊操作需要删除分区 输入d 然后选择分区号                   格式化          mkfs -t ext3 /dev/sdb2        mkfs -t ext4 /dev/sdb2         mkfs.xfs -f /dev/sdb2                查看分区信息       lsblklsblk -f  更详细用 blkid  获取磁盘的uuid和属性vim /etc/fstab配置模板：UUID=*************  挂载路径  格式  defaults  1  1 示例   UUID=b2cc970b-7cf4-453e-b3f5-916497b9530e  /apps  xfs  defaults  1  1 </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、-硬盘分区基础知识&quot;&gt;&lt;a href=&quot;#一、-硬盘分区基础知识&quot; class=&quot;headerlink&quot; title=&quot;一、 硬盘分区基础知识&quot;&gt;&lt;/a&gt;一、 硬盘分区基础知识&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;磁盘分区类型：硬盘分区最常见的类型为msdos和gp</summary>
      
    
    
    
    
  </entry>
  
</feed>
