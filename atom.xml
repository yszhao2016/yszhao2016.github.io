<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yszhao的博客</title>
  
  <subtitle>记录我的生活 学习</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-19T01:16:30.944Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>yszhao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jenkins-发布php项目</title>
    <link href="http://example.com/2023/07/19/jenkins-%E5%8F%91%E5%B8%83php%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2023/07/19/jenkins-%E5%8F%91%E5%B8%83php%E9%A1%B9%E7%9B%AE/</id>
    <published>2023-07-19T01:16:30.000Z</published>
    <updated>2023-07-19T01:16:30.944Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>linux系统后台运行任务</title>
    <link href="http://example.com/2023/07/19/linux%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E4%BB%BB%E5%8A%A1/"/>
    <id>http://example.com/2023/07/19/linux%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E4%BB%BB%E5%8A%A1/</id>
    <published>2023-07-19T01:15:25.000Z</published>
    <updated>2023-07-19T01:15:25.544Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>php扩展安装</title>
    <link href="http://example.com/2023/07/19/php%E6%89%A9%E5%B1%95%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2023/07/19/php%E6%89%A9%E5%B1%95%E5%AE%89%E8%A3%85/</id>
    <published>2023-07-19T01:14:51.000Z</published>
    <updated>2023-07-19T01:14:51.639Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx之logrotate</title>
    <link href="http://example.com/2023/07/19/nginx%E4%B9%8Blogrotate/"/>
    <id>http://example.com/2023/07/19/nginx%E4%B9%8Blogrotate/</id>
    <published>2023-07-19T01:14:27.000Z</published>
    <updated>2023-07-19T01:14:27.055Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>hj212环保协议-2007</title>
    <link href="http://example.com/2023/07/13/hj212%E7%8E%AF%E4%BF%9D%E5%8D%8F%E8%AE%AE-2007/"/>
    <id>http://example.com/2023/07/13/hj212%E7%8E%AF%E4%BF%9D%E5%8D%8F%E8%AE%AE-2007/</id>
    <published>2023-07-13T12:08:15.000Z</published>
    <updated>2023-07-13T12:08:15.753Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>shell脚本学习1</title>
    <link href="http://example.com/2023/07/13/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A01/"/>
    <id>http://example.com/2023/07/13/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A01/</id>
    <published>2023-07-13T11:57:19.000Z</published>
    <updated>2023-07-13T11:57:19.015Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx-vhost-安全配置模版</title>
    <link href="http://example.com/2023/07/13/nginx-vhost-%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E6%A8%A1%E7%89%88/"/>
    <id>http://example.com/2023/07/13/nginx-vhost-%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E6%A8%A1%E7%89%88/</id>
    <published>2023-07-13T11:11:30.000Z</published>
    <updated>2023-07-13T11:12:24.875Z</updated>
    
    <content type="html"><![CDATA[<p>#nginx-vhost-安全配置模版</p><pre><code>server&#123;        listen 443 ssl ;        server_name  [域名或者ip];        index        index.php index.html index.htm;        root [项目路径];        access_log  /var/log/nginx/[项目名称].access.log;        error_log   /var/log/nginx/[项目名称].error.log;        #证书文件名称        ssl_certificate [证书路径 公钥];        #私钥文件名称        ssl_certificate_key [证书路径 私钥];        ssl_session_timeout 5m;        #请按照以下协议配置        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;        #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;        ssl_prefer_server_ciphers on        #允许cookie        add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;        #安全头        add_header X-Xss-header &quot;1;mode=block&quot;;        add_header Set-Cookie &quot;HttpOnly&quot;;        add_header Set-Cookie &quot;Secure&quot;;        add_header X-Frame-Options &quot;SAMEORIGIN&quot;;        location ~ \.(json|lock|git)$ &#123;                 deny all;        &#125;        location ~ ^/(uploads|assets)/.*\.(php|php5|jsp|shtml)$ &#123;            deny all;        &#125;        location ~ .*\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx)$ &#123;            add_header Content-Disposition attachment;        &#125;        location =/assets/libs/bootstrap/Gemfile &#123;                       return 404;        &#125;        location ~ /\. &#123;            deny  all;        &#125;        location / &#123;                proxy_cookie_path / &quot;/; httponly; secure; SameSite=None&quot;;                if (!-e $request_filename) &#123;                        rewrite  ^(.*)$  /index.php?s=/$1  last;                        break;                &#125;        &#125;        location ~ \.php(.*)$ &#123;                fastcgi_pass   [访问php方式];                fastcgi_index  index.php;                fastcgi_split_path_info  ^((?U).+\.php)(/?.+)$;                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;                fastcgi_param  PATH_INFO  $fastcgi_path_info;                fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;                include        fastcgi_params;        &#125;        #timeout        large_client_header_buffers 4 16k;        client_max_body_size 180m;        client_body_buffer_size 128k;        fastcgi_connect_timeout 600;        fastcgi_read_timeout 600;        fastcgi_send_timeout 600;        fastcgi_buffer_size 128k;        fastcgi_buffers   2 256k;        fastcgi_busy_buffers_size 256k;        fastcgi_temp_file_write_size 256k;        proxy_read_timeout  240s;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#nginx-vhost-安全配置模版&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server&amp;#123;
        listen 443 ssl ;
        server_name  [域名或者ip];
        index        index.php in</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>fail2ban软件使用</title>
    <link href="http://example.com/2023/07/09/fail2ban%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2023/07/09/fail2ban%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/</id>
    <published>2023-07-09T06:19:39.000Z</published>
    <updated>2023-07-13T12:27:58.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><pre><code>CentOS 中使用fail2ban和firewalld限制IP拦截cc攻击</code></pre><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre><code>yum -y install fail2ban</code></pre><h1 id="新建规则"><a href="#新建规则" class="headerlink" title="新建规则"></a>新建规则</h1><pre><code>/etc/fail2ban/filter.d/  编写过滤规则的目录 vi /etc/fail2ban/filter.d/nginx-cc.conf[Definition]#failregex = &lt;HOST&gt;-.*-.*HTTP/1.*(404|301|503).*$failregex = ^&lt;HOST&gt; -.*&quot;(GET|POST).* HTTP\/.*$ignoreregex =</code></pre><h1 id="正则规则检查"><a href="#正则规则检查" class="headerlink" title="正则规则检查"></a>正则规则检查</h1><pre><code>fail2ban-regex /var/log/nginx/access.log &quot;&lt;HOST&gt; -.*- .*HTTP/1.* .* .*$&quot;  </code></pre><h1 id="根据配置文件检查"><a href="#根据配置文件检查" class="headerlink" title="根据配置文件检查"></a>根据配置文件检查</h1><pre><code>fail2ban-regex /var/log/nginx/access.log /etc/fail2ban/filter.d/nginx-cc.conf  </code></pre><h1 id="控制规则配置文件"><a href="#控制规则配置文件" class="headerlink" title="控制规则配置文件"></a>控制规则配置文件</h1><pre><code>[DEFAULT]ignoreip = 127.0.0.1/8  117.89.130.84 117.89.134.183/16  218.2.244.241/16 49.82.132.215/16 122.195.252.237/16 114.238.64.157/16 180.110.114.152/16#放行的ip 可以带网段ignorecommand =bantime  = 60#屏蔽时间，-1是永久屏蔽findtime  = 60#设置限定时间内超过 最大尝试次数 限制次数即被封锁maxretry = 5#最大尝试次数backend = auto#日志修改后检测机制usedns = warn#ssh链接加速logencoding = autoenabled = false[sshd]## 分类设置（基于 SSHD 服务的防护） enabled = true## 是否开启防护，false 为关闭 filter = sshd## 过滤规则 filter 名称，对应 filter.d 目录下的 sshd.conf  action   = iptables[name=SSH, port=22, protocol=tcp] #《###action = iptables[name=SSH, port=ssh, protocol=tcp] ## 动作参数#sendmail-whois[name=SSH, dest=you@example.com, sender=fail2ban@example.com,   sendername=&quot;Fail2Ban&quot;]## 邮件通知参数## 收件人地址           ## 发件人地址####》   这是个例子 logpath = /var/log/secure## 检测系统登陆日志文件 maxretry = 3## 最大尝试次数banaction=iptables-allportsbantime = 3600[nginx-cc] #过滤规则名称 下方就是 规律规则 相关 限制条件enabled = trueport=http,httpsfilter = nginx-ccfindtime = 1#1秒钟检查一次maxretry = 100#最多100个bantime = 3600#封锁ip的时间banaction=iptables-multiport#匹配的哪些日志文件logpath = /var/log/nginx/*access.log          /var/log/nginx/access.log</code></pre><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><pre><code>#启动systemctl start fail2ban#停止systemctl stop fail2ban#查看具体规则限制了哪些ipfail2ban-client status 规则名称示例：   fail2ban-client status nginx-cc#解封某条过滤规则封锁的ipfail2ban-client set nginx-cc unbanip  112.84.237.102</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;CentOS 中使用fail2ban和firewalld限制IP拦截cc攻击
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;安</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web安全</title>
    <link href="http://example.com/2023/07/09/web%E5%AE%89%E5%85%A8/"/>
    <id>http://example.com/2023/07/09/web%E5%AE%89%E5%85%A8/</id>
    <published>2023-07-09T06:16:41.000Z</published>
    <updated>2023-07-13T06:20:53.705Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>openEuler搭建lnmp</title>
    <link href="http://example.com/2023/07/09/openEuler%E6%90%AD%E5%BB%BAlnmp/"/>
    <id>http://example.com/2023/07/09/openEuler%E6%90%AD%E5%BB%BAlnmp/</id>
    <published>2023-07-09T06:04:46.000Z</published>
    <updated>2023-07-13T11:09:13.709Z</updated>
    
    <content type="html"><![CDATA[<p>#openEuler搭建lnmp</p><p>##安装php<br>wget <a href="https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</a></p><p>rpm -ivh –nodeps epel-release-latest-7.noarch.rp</p><p>wget <a href="https://rpms.remirepo.net/enterprise/remi-release-7.rpm">https://rpms.remirepo.net/enterprise/remi-release-7.rpm</a></p><p>rpm -ivh –nodeps remi-release-7.rpm </p><p>yum-config-manager –enable remi-php73</p><p>yum install php73 php73-php-fpm php73-php-opcache php73-php-gd php73-php-mbstring php73-php-xml php73-php-pdo php73-php-mysqlnd php73-php-pecl-mysql php73-php-bcmath</p><p>##rpm包安装mysql</p><pre><code>Error:  Problem: cannot install the best candidate for the job  - nothing provides libcrypto.so.10()(64bit) needed by php73-php-fpm-7.3.33-10.el7.remi.x86_64  - nothing provides libssl.so.10()(64bit) needed by php73-php-fpm-7.3.33-10.el7.remi.x86_64  - nothing provides libcrypto.so.10(libcrypto.so.10)(64bit) needed by php73-php-fpm-7.3.33-10.el7.remi.x86_64  - nothing provides libssl.so.10(libssl.so.10)(64bit) needed by php73-php-fpm-7.3.33-10.el7.remi.x86_64  - nothing provides libcrypto.so.10(OPENSSL_1.0.1_EC)(64bit) needed by php73-php-fpm-7.3.33-10.el7.remi.x86_64  - nothing provides libcrypto.so.10(OPENSSL_1.0.2)(64bit) needed by php73-php-fpm-7.3.33-10.el7.remi.x86_64  </code></pre><p>此报错处理办法      </p><pre><code>yum install compat-openssl10yum install http://mirror.centos.org/centos/8-stream/AppStream/x86_64/os/Packages/compat-openssl10-1.0.2o-3.el8.x86_64.rpm</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#openEuler搭建lnmp&lt;/p&gt;
&lt;p&gt;##安装php&lt;br&gt;wget &lt;a href=&quot;https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm&quot;&gt;https://dl.fedor</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ubuntu搭建lnmp环境</title>
    <link href="http://example.com/2023/07/09/ubuntn%E6%90%AD%E5%BB%BAlnmp%E7%8E%AF%E5%A2%83/"/>
    <id>http://example.com/2023/07/09/ubuntn%E6%90%AD%E5%BB%BAlnmp%E7%8E%AF%E5%A2%83/</id>
    <published>2023-07-09T06:01:25.000Z</published>
    <updated>2023-07-13T06:20:53.705Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>docker学习3</title>
    <link href="http://example.com/2023/07/09/docker%E5%AD%A6%E4%B9%A03/"/>
    <id>http://example.com/2023/07/09/docker%E5%AD%A6%E4%B9%A03/</id>
    <published>2023-07-09T06:00:02.000Z</published>
    <updated>2023-07-13T06:20:53.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-compose使用"><a href="#docker-compose使用" class="headerlink" title="docker-compose使用"></a>docker-compose使用</h1><h2 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker-compose使用&quot;&gt;&lt;a href=&quot;#docker-compose使用&quot; class=&quot;headerlink&quot; title=&quot;docker-compose使用&quot;&gt;&lt;/a&gt;docker-compose使用&lt;/h1&gt;&lt;h2 id=&quot;docker-co</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker学习2</title>
    <link href="http://example.com/2023/07/08/docker%E5%AD%A6%E4%B9%A02/"/>
    <id>http://example.com/2023/07/08/docker%E5%AD%A6%E4%B9%A02/</id>
    <published>2023-07-08T13:54:55.000Z</published>
    <updated>2023-07-13T06:20:53.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile-学习"><a href="#Dockerfile-学习" class="headerlink" title="Dockerfile 学习"></a>Dockerfile 学习</h1><h2 id="相关语法"><a href="#相关语法" class="headerlink" title="相关语法"></a>相关语法</h2><pre><code>FROM  scratchADD hello /CMD [&quot;/hello&quot;]</code></pre><h2 id="FROM语法"><a href="#FROM语法" class="headerlink" title="FROM语法"></a>FROM语法</h2><pre><code>FROM scratch   //制作  base imageFROM centos    //使用  base imageFROM ubuntu:14.4</code></pre><h2 id="LABEL语法"><a href="#LABEL语法" class="headerlink" title="LABEL语法"></a>LABEL语法</h2><pre><code>LABEL maintainer=&quot;xiaoquwl@gmail.com&quot;LABEL version=&quot;1.0&quot;LABEL description=&quot;This is description&quot;注：Metadata不可少</code></pre><h2 id="RUN-语法"><a href="#RUN-语法" class="headerlink" title="RUN 语法"></a>RUN 语法</h2><pre><code>RUN yum update &amp;&amp; yum install -y vim \python-dev 注：反斜杠换行RUN</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dockerfile-学习&quot;&gt;&lt;a href=&quot;#Dockerfile-学习&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile 学习&quot;&gt;&lt;/a&gt;Dockerfile 学习&lt;/h1&gt;&lt;h2 id=&quot;相关语法&quot;&gt;&lt;a href=&quot;#相关语法&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker学习1-Docker基础命令</title>
    <link href="http://example.com/2023/07/08/docker%E5%AD%A6%E4%B9%A01/"/>
    <id>http://example.com/2023/07/08/docker%E5%AD%A6%E4%B9%A01/</id>
    <published>2023-07-08T13:47:55.000Z</published>
    <updated>2023-07-13T06:20:53.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker基础命令"><a href="#Docker基础命令" class="headerlink" title="Docker基础命令"></a>Docker基础命令</h1><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><pre><code>Docker image ls </code></pre><h3 id="查看运行中的容器container"><a href="#查看运行中的容器container" class="headerlink" title="查看运行中的容器container"></a>查看运行中的容器container</h3><pre><code>docker ps      展示 正在运行的docker ps -a   所有  启动与未启动的 </code></pre><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><pre><code>docker run 容器名称示例：</code></pre><h3 id="查看运行中的容器container-1"><a href="#查看运行中的容器container-1" class="headerlink" title="查看运行中的容器container"></a>查看运行中的容器container</h3><pre><code>docker inspect  容器名称    查看容器信息</code></pre><h3 id="根据dockerfile-文件生成image"><a href="#根据dockerfile-文件生成image" class="headerlink" title="根据dockerfile 文件生成image"></a>根据dockerfile 文件生成image</h3><pre><code>Docker build -t tag/镜像名称   dockerfile所在目录    示例：    docker build -t test/hello-word .</code></pre><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><pre><code>docker rm 容器ID       docker rm $(docker container ls -aq)    删除所有容器docker rmi image名称   删除镜像</code></pre><h3 id="进入容器内"><a href="#进入容器内" class="headerlink" title="进入容器内"></a>进入容器内</h3><pre><code>docker exec -it 容器名 /bin/bash示例：docker exec it php71 /bin/bash</code></pre><h3 id="docker-镜像-导出导入【必须成对使用】"><a href="#docker-镜像-导出导入【必须成对使用】" class="headerlink" title="docker 镜像 导出导入【必须成对使用】"></a>docker 镜像 导出导入【必须成对使用】</h3><pre><code>docker export：导出容器docker import：导入容器为镜像docker save：导出镜像    -o:输出到的文件。    导出示例：        docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3        docker save ubuntu:load&gt;/root/ubuntu.tardocker load：导入镜像    -i：指定导出的文件    -q：精简输出信息        导入示例：        docker load -i ubuntu.tar        docker load &lt; ubuntu.tar</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker基础命令&quot;&gt;&lt;a href=&quot;#Docker基础命令&quot; class=&quot;headerlink&quot; title=&quot;Docker基础命令&quot;&gt;&lt;/a&gt;Docker基础命令&lt;/h1&gt;&lt;h3 id=&quot;查看镜像&quot;&gt;&lt;a href=&quot;#查看镜像&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux硬盘以及分区</title>
    <link href="http://example.com/2023/03/16/linux%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA/"/>
    <id>http://example.com/2023/03/16/linux%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA/</id>
    <published>2023-03-16T02:24:39.000Z</published>
    <updated>2023-07-13T09:47:34.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-硬盘分区基础知识"><a href="#一、-硬盘分区基础知识" class="headerlink" title="一、 硬盘分区基础知识"></a>一、 硬盘分区基础知识</h1><pre><code>磁盘分区类型：硬盘分区最常见的类型为msdos和gpt，前者表示MBR分区，而后者表示GPT分区。传统的BIOS只支持MBR分区硬盘启动，一个硬盘只能分成四个分区，并且单个分区最大不超过2TB。GPT(即GUID分区表)是源自EFI标准的一种较新的磁盘分区表结构的标准，是未来磁盘分区的主要形式。与MBR分区方式相比，突破MBR4个主分区限制，每个磁盘最多支持128个分区，持大于2T的分区，最大卷可达18EB。1、MBR分区：MBR的意思是“主引导记录”，它有自己的启动器，也就是启动代码，一旦启动代码被破坏，系统就没法启动，只有通过修复才能启动系统。最大支持2TB容量（T; terabytes,1TB=1024GB），对分区的设限：最多4个主分区或3个主分区加一个扩展分区。创建工具典型有fdisk。2、GPT分区：GPT意为GUID分区表，这是一个正逐渐取代MBR的新标准，它由UEFI辅住而形成的，这样就有了UEFI用于取代老旧的BIOS，而GPT则取代老旧的MBR。这个标准没有MBR的那些限制比如：容量2T限制、分区个数限制等。磁盘驱动器容量可以大得多，大到操作系统和文件系统都没法支持。它同时还支持几乎无限个分区数量，限制只在于操作系统，Windows支持最多128个GPT分区。GPT和MBR是不同的分区表类型。使用MBR分区表的硬盘最多只能划分4个主分区磁盘，并且MBR最大仅支持2TB的硬盘。如果需要分区的硬盘容量超过2TB了，则需要使用GPT分区表类型，此分区表类型不受分区个数、硬盘大小的限制。创建GPT分区典型工具有parted,gdisk,sgdisk等,fdisk不支持创建GPT分区。我们管理的服务器可能会随着业务量的不断增长而造成磁盘数据空间不足的情况（不考虑inode），这个时候我们就可能需要增加磁盘或挂载一些其他的块设备，这里我主要介绍如何使用fdisk分区工具创建磁盘分区和挂载分区。最重要的三步就是：1、创建主分区。（主分区创建之后可以马上被使用但不能再分区）2、创建扩展分区 (扩展分区必须再进行二次分区后才能被使用)3、在扩展分区上创建逻辑分区（扩充分区再分下去的是什么呢？它就是逻辑分区（Logical Partion））Linux下单个磁盘最多可以有15个分区。3个主分区 + 1个扩展分区 + 11个逻辑分区。建议的分区方法是：先分3个主分区，第四个分区为扩展分区，然后在扩展分区中再分成11个逻辑分区。在unix/linux系统中，一切都是文件。所有硬盘、软盘、键盘等设备都用文件来代表，对应 着/dev下面的文件。对于应用程序来说，可以像对待普通文件一样打开，关闭、读写这些设备文件。但是这种文件名，比如/dev/sda、/dev /raw/raw1都是用户空间名称，OS Kernel根本不知道这个名称指的是什么。在内核空间是通过major、minor device number 来区分设备的块设备也是通过/dev目录下的文件系统节点来访问。块设备上能够容纳文件系统。常见的块设备如磁盘、emmc flash、nand flash、 SD卡等。在linux系统中/dev目录下使用ls -l命令查看详细信息，第一个字母“b”为块设备文件的标识。/dev下每个块设备文件对应一个磁盘的分区。</code></pre><h1 id="二、创建分区"><a href="#二、创建分区" class="headerlink" title="二、创建分区"></a>二、创建分区</h1><pre><code>虽然支持mbr的硬盘（容量小于等于2T）分区表中最多能存储四个分区，但我们实际使用时一般只分为两个分区，一个是主分区（Primary Partion）一个是扩展分区(extended partition)两种，主分区可以马上被使用但不能再分区，扩展分区必须再进行分区后才能使用，也就是说它必须还要进行二次分区。那么由扩充分区再分下去的是什么呢？它就是逻辑分区（Logical Partion）。 对习惯于使用Dos或Windows的朋友来说，有几个分区就有几个驱动器，并且每个分区都会获得一个字母标识符，然后就可以选用这个字母来指定在这个分区上的文件和目录，它们的文件结构都是独立的，非常好理解。 因为对Linux用户来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构。 Linux中每个分区都是用来组成整个文件系统的一部分，因为它采用了一种叫“挂载点”的处理方法，它的整个文件系统中包含了一整套的文件和目录， 且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。   1、 fdisk -l 查看块设备情况（块设备包括硬盘，U盘，SD卡） </code></pre><h1 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h1><pre><code>虚拟文件系统(VFS) 操作模型，通过mkfs.xxx等这种系列性的命令创建格式化很多不同的文件系统，比如：mkfs.ext4 /dev/sda 、 mkfs.btrfs /dev/sdb等,但这些不同的文件系统都有各自的API接口，而用户想要的是，不管你是什么API，他们只关心mount/umount，或open/close等操作，等于屏蔽了底层的文件系统类型，运维层面只关心mount等操作即可。不同的文件系统类型有不同的特点，因而根据存储设备的硬件特性、系统需求等有不同的应用场合,什么意思呢，也就是说假如你用了不同设备都是硬盘，那么建立这个硬盘可以用不同的文件系统来做映射，可能就会获得不同的性能提升。还是要看相关的设备种类和厂商设计的目的。文件系统    描 述Ext    Linux 中最早的文件系统，由于在性能和兼容性上具有很多缺陷，现在已经很少使用,是为 Linux 核心所做的第一个文件系统，最大可支持 2GB 的文件系统。Ext2    是 Ext 文件系统的升级版本，Red Hat Linux 7.2 版本以前的系统默认都是 Ext2 文件系统。于 1993 年发布，        支持最大 16TB 的分区和最大 2TB 的文件（1TB=1024GB=1024x1024KB)        Linux正统的文件系统(如ext2、ext3)一个文件由目录项、inode和数据块组成。        目录项:包括文件名和inode节点号。        Inode：又称文件索引节点，是文件基本信息的存放地和数据块指针存放地。        数据块：文件的具体内容存放地。        将硬盘分区时会划分出目录块、inode Table区块和data block数据区域。一个文件由一个目录项、inode和数据区域块组成。        Inode包含文件的属性(如读写属性、owner等，以及指向数据块的指针)，数据区域块则是文件内容。        当查看某个文件时，会先从inode table中查出文件属性及数据存放点，再从数据块中读取数据Ext3    是 Ext2 文件系统的升级版本，最大的区别就是带日志功能，以便在系统突然停止时提高文件系统的可靠性。支持最大 16TB 的分区和最大 2TB 的文件Ext4    是 Ext3 文件系统的升级版。Ext4 在性能、伸缩性和可靠性方面进行了大量改进。Ext4 的变化可以说是翻天覆地的，        比如向下兼容 Ext3、最大 1EB 文件系统和 16TB 文件、无限数量子目录、Extents 连续数据块 概念、多块分配、延迟分配、        持久预分配、快速 FSCK、日志校验、无日志模式、在线碎片整理、inode 增强、        默认启用 barrier 等。它是 CentOS 6.3 的默认文件系统                xfs        被业界称为最先进、最具有可升级性的文件系统技术，由 SGI 公司设计，目前最新的 CentOS 7 版本默认使用的就是此文件系统。swap    swap 是 Linux 中用于交换分区的文件系统（类似于 Windows 中的虚拟内存)，当内存不够用时，使用交换分区暂时替代内存。一般大小为内存的 2 倍，但是不要超过 2GB。它是 Linux 的必需分区NFS    NFS 是网络文件系统（Network File System）的缩写，是用来实现不同主机之间文件共享的一种网络服务，本地主机可以通过挂载的方式使用远程共享的资源iso9660    光盘的标准文件系统。Linux 要想使用光盘，必须支持 iso9660 文件系统fat    就是 Windows 下的 fatl6 文件系统，在 Linux 中识别为 fatvfat    就是 Windows 下的 fat32 文件系统，在 Linux 中识别为 vfat。支持最大 32GB 的分区和最大 4GB 的文件</code></pre><p><font color='red'>VFAT 是一种早期的文件系统，通常用于与 Windows 系统兼容的可移动设备。由于 VFAT 文件系统不支持类似 UNIX 文件系统的权限和所有权概念，<br>因此在挂载后无法执行 chown 命令来更改文件和目录的所有者。</font></p><pre><code>NTFS    就是 Windows 下的 NTFS 文件系统，不过 Linux 默认是不能识别 NTFS 文件系统的，如果需要识别，则需要重新编译内核才能支持。        它比 fat32 文件系统更加安全，速度更快，支持最大 2TB 的分区和最大 64GB 的文件ufs    Sun 公司的操作系统 Solaris 和 SunOS 所采用的文件系统proc    Linux 中基于内存的虚拟文件系统，用来管理内存存储目录 /procsysfs    和 proc —样，也是基于内存的虚拟文件系统，用来管理内存存储目录 /sysfstmpfs    也是一种基于内存的虚拟文件系统，不过也可以使用 swap 交换分区现在一般是Ext4 xfs格式</code></pre><h1 id="分区工具"><a href="#分区工具" class="headerlink" title="分区工具"></a>分区工具</h1><pre><code>fdisk命令可以用于对2TB以内的磁盘进行添加、删除、转换分区的功能,用户可以根据实际情况进行合理划分。parted -l命令parted一款功能强大的磁盘分区和分区大小调整工具。parted -l同fdisk -l命令类似，但是它可以识别2TB以上的硬盘，也能查看 GPT 磁盘的分区</code></pre><p>#具体操作  </p><h2 id="基本命令介绍"><a href="#基本命令介绍" class="headerlink" title="基本命令介绍"></a>基本命令介绍</h2><pre><code>df -h      查看分区情况 相对比较直观      fdisk -l      查看系统有几块硬盘  分标有多大  分了那几个区            lsblklsblk -f  查看分区信息  -f更详细令可以列出所有可用块设备的信息,而且还能显示他们之间的依赖关系，但是它不会列出RAM盘的信息。块设备有硬盘,闪存盘,CD-ROM等等用 blkid  获取磁盘的uuid和属性</code></pre><h2 id="详细操作"><a href="#详细操作" class="headerlink" title="详细操作"></a>详细操作</h2><pre><code>分区1.fdisk   盘符    示例：fidisk /dev/sdb2.输入n 是创建分区（一般下面多是默认）3.然后选择分区类型                p   primary(主分区)                e   extende（扩展）                4.设置分区号（一般默认）                5.然后设置     起始扇区              结束扇区                  6.设置完 输入w    保存     7.特殊操作需要删除分区 输入d 然后选择分区号                   格式化          mkfs -t ext3 /dev/sdb2        mkfs -t ext4 /dev/sdb2         mkfs.xfs -f /dev/sdb2                查看分区信息       lsblklsblk -f  更详细用 blkid  获取磁盘的uuid和属性vim /etc/fstab配置模板：UUID=*************  挂载路径  格式  defaults  1  1 示例   UUID=b2cc970b-7cf4-453e-b3f5-916497b9530e  /apps  xfs  defaults  1  1 </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、-硬盘分区基础知识&quot;&gt;&lt;a href=&quot;#一、-硬盘分区基础知识&quot; class=&quot;headerlink&quot; title=&quot;一、 硬盘分区基础知识&quot;&gt;&lt;/a&gt;一、 硬盘分区基础知识&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;磁盘分区类型：硬盘分区最常见的类型为msdos和gp</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>laravel源码学习2</title>
    <link href="http://example.com/2023/03/14/laravel%E5%AD%A6%E4%B9%A02/"/>
    <id>http://example.com/2023/03/14/laravel%E5%AD%A6%E4%B9%A02/</id>
    <published>2023-03-14T03:59:07.000Z</published>
    <updated>2023-07-08T13:11:09.697Z</updated>
    
    <content type="html"><![CDATA[<p>#laravel 核心文件applications</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#laravel 核心文件applications&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>laravel学习1</title>
    <link href="http://example.com/2023/03/14/laravel%E5%AD%A6%E4%B9%A01/"/>
    <id>http://example.com/2023/03/14/laravel%E5%AD%A6%E4%B9%A01/</id>
    <published>2023-03-14T03:45:11.000Z</published>
    <updated>2023-07-08T13:11:09.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="public-index-php文件解析"><a href="#public-index-php文件解析" class="headerlink" title="public/index.php文件解析"></a>public/index.php文件解析</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># 引入自动加载文件</span><br><span class="line">require __DIR__.&#x27;/../bootstrap/autoload.php&#x27;;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Turn On The Lights</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| We need to illuminate PHP development, so let us turn on the lights.</span><br><span class="line">| This bootstraps the framework and gets it ready for use, then it</span><br><span class="line">| will load up this application so that we can run it and send</span><br><span class="line">| the responses back to the browser and delight our users.</span><br><span class="line">|</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">$app = require_once __DIR__.&#x27;/../bootstrap/app.php&#x27;;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Run The Application</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| Once we have the application, we can handle the incoming request</span><br><span class="line">| through the kernel, and send the associated response back to</span><br><span class="line">| the client&#x27;s browser allowing them to enjoy the creative</span><br><span class="line">| and wonderful application we have prepared for them.</span><br><span class="line">|</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$response-&gt;send();</span><br><span class="line"></span><br><span class="line">$kernel-&gt;terminate($request, $response);</span><br></pre></td></tr></table></figure><h1 id="bootstrap-autoload-php文件解析"><a href="#bootstrap-autoload-php文件解析" class="headerlink" title="/bootstrap/autoload.php文件解析"></a>/bootstrap/autoload.php文件解析</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">#定义记录时间的常量</span><br><span class="line">define(&#x27;LARAVEL_START&#x27;, microtime(true));</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Register The Composer Auto Loader</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| Composer provides a convenient, automatically generated class loader</span><br><span class="line">| for our application. We just need to utilize it! We&#x27;ll require it</span><br><span class="line">| into the script here so that we do not have to worry about the</span><br><span class="line">| loading of any our classes &quot;manually&quot;. Feels great to relax.</span><br><span class="line">|</span><br><span class="line">*/</span><br><span class="line">#引入外部库   自动加载文件</span><br><span class="line">require __DIR__.&#x27;/../vendor/autoload.php&#x27;;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">| Include The Compiled Class File</span><br><span class="line">|--------------------------------------------------------------------------</span><br><span class="line">|</span><br><span class="line">| To dramatically increase your application&#x27;s performance, you may use a</span><br><span class="line">| compiled class file which contains all of the classes commonly used</span><br><span class="line">| by a request. The Artisan &quot;optimize&quot; is used to create this file.</span><br><span class="line">|</span><br><span class="line">*/</span><br><span class="line">#引入laravel缓存文件</span><br><span class="line">$compiledPath = __DIR__.&#x27;/cache/compiled.php&#x27;;</span><br><span class="line"></span><br><span class="line">if (file_exists($compiledPath)) &#123;</span><br><span class="line">    require $compiledPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;public-index-php文件解析&quot;&gt;&lt;a href=&quot;#public-index-php文件解析&quot; class=&quot;headerlink&quot; title=&quot;public/index.php文件解析&quot;&gt;&lt;/a&gt;public/index.php文件解析&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>windows搭建apache+php+mysql5.6</title>
    <link href="http://example.com/2023/02/25/windows%E6%90%AD%E5%BB%BAapache-php-mysql5-6/"/>
    <id>http://example.com/2023/02/25/windows%E6%90%AD%E5%BB%BAapache-php-mysql5-6/</id>
    <published>2023-02-25T03:51:34.000Z</published>
    <updated>2023-07-08T13:11:09.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装mysql服务"><a href="#安装mysql服务" class="headerlink" title="安装mysql服务"></a>安装mysql服务</h1><pre><code>1.下载地址：https://downloads.mysql.com/archives/community/2.下载相应windows版本3.解压后cmd cd到文件目录mysqld.exe  执行   mysqld.exe install【mysqld remove 移除服务 mysqld start 启动服务】4.设置开机启动  然后再win+r 输入services.msc  打开后找到mysql 右键点击属性   将启动类型设置为自动即可【注：期间不同版本可能会报奇奇怪怪的错，百度安装相关的版本vc库】</code></pre><h1 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h1><pre><code>1.下载地址：https://windows.php.net/downloads/releases/archives/2.下载版本必须有  php7apache2_4.dll  vc版本最好跟apache的版本一样3.配置php.ini 开启相应 扩展4.测试是否能用  到相应目录 执行 php.exe -v【注：期间不同版本可能会报奇奇怪怪的错，百度安装相关的版本vc库】</code></pre><h1 id="安装apache-服务器"><a href="#安装apache-服务器" class="headerlink" title="安装apache 服务器"></a>安装apache 服务器</h1><p>##apache 安装对接php<br>    下载：<a href="https://www.apachelounge.com/download/VC14/">https://www.apachelounge.com/download/VC14/</a></p><pre><code>到apache/config/httpd.conf文件找到&lt;IfModule unixd_module&gt;配置行 在其上面添加LoadModule php7_module C:/php/php7apache2_4.dll  【php7apache2_4.dll 不同版本不同  具体目录根据自己的配置】AddType application/x-httpd-php .php .html .htmPHPIniDir c:/php                                 【配置PHP所在目录  具体目录根据自己的配置】  然后通过bin目录下   **httpd.exe  -t** 测试配置是否通过bin目录下 ApacheMonitor.exe 可以用来启动关闭 httpd服务</code></pre><h2 id="配置apache项目访问"><a href="#配置apache项目访问" class="headerlink" title="配置apache项目访问"></a>配置apache项目访问</h2><h3 id="1-配置项"><a href="#1-配置项" class="headerlink" title="1.配置项"></a>1.配置项</h3><pre><code>    httpd.exe -k install -n &quot;apache2.4&quot;    1.ServerName     配置域名访问地址    例：ServerName 192.168.100.34:8080    ServerName www.baidu.com        2.ServerRoot  配置apache安装目录                 例     Define SRVROOT &quot;c:/httpd&quot;                    ServerRoot &quot;$&#123;SRVROOT&#125;&quot;                                    3.Listen      监听端口                 例     Listen 8080                 4.DocumentRoot    配置项目目录                 例：  DocumentRoot &quot;$&#123;SRVROOT&#125;/htdocs/jnyy.iguanwei.com/public&quot;        5.&lt;Directory 目录&gt;        权限    &lt;/&gt;Directory&gt;    配置目录权限相关            例：        &lt;Directory &quot;$&#123;SRVROOT&#125;/htdocs/jnyy.iguanwei.com/public&quot;&gt;                    Options Indexes FollowSymLinks                    AllowOverride All                    Require all granted         &lt;/Directory&gt;             6.配置默认访问文件            &lt;IfModule dir_module&gt;              DirectoryIndex  index.php index.html        &lt;/IfModule&gt;              </code></pre><h3 id="伪静态"><a href="#伪静态" class="headerlink" title="伪静态"></a>伪静态</h3><pre><code>1. httpd.conf配置文件 启动rewrite模块 如下：    LoadModule rewrite_module modules/mod_rewrite.so2.项目根目录.htaccess文件配置入下  没有则新建    &lt;IfModule mod_rewrite.c&gt;     RewriteEngine on     RewriteBase /     RewriteCond %&#123;REQUEST_FILENAME&#125; !-d     RewriteCond %&#123;REQUEST_FILENAME&#125; !-f     RewriteRule ^(.*)$ index.php?s=/$1 [QSA,PT,L]    &lt;/IfModule&gt;3.对应apache  httpd.conf配置文件     AllowOverride All    &lt;Directory 项目目录&gt;                            Options Indexes FollowSymLinks                            AllowOverride All                            Require all granted    &lt;/Directory&gt;      </code></pre><h3 id="配置开机启动"><a href="#配置开机启动" class="headerlink" title="配置开机启动"></a>配置开机启动</h3><pre><code>   1.将apache加入windows服务              apache的bin目录下 执行 httpd.exe -thttpd.exe -k install -n &quot;apache2.4&quot;         2.设置开机启动  然后再win+r 输入services.msc  打开后找到mysql 右键点击属性   将启动类型设置为自动即可   </code></pre><h1 id="apache相关知识"><a href="#apache相关知识" class="headerlink" title="apache相关知识"></a>apache相关知识</h1><h2 id="windows下apache常用命令"><a href="#windows下apache常用命令" class="headerlink" title="windows下apache常用命令"></a>windows下apache常用命令</h2><pre><code>httpd -k install                           安装apache服务httpd -k uninstall                         移除apache服务httpd -k start                             启动apache服务httpd -k restart                           重启apache服务httpd -k stop                              关闭已安装的apache服务httpd -v                                   查看apache版本httpd -t                                   查看apache配置文件状态    </code></pre><h2 id="重写规则"><a href="#重写规则" class="headerlink" title="重写规则"></a>重写规则</h2><pre><code>网站根目录下创建  .htaccess  文件1) R[=code](force redirect)  #强制外部重定向强制在替代字符串加上http://thishost[:thisport]/前缀重定向到外部的URL.如果code不指定，将用缺省的302 HTTP状态码。2) F(force URL to be forbidden)  #禁用URL,返回403HTTP状态码。3) G(force URL to be gone)  # 强制URL为GONE，返回410HTTP状态码。4) P(force proxy) # 强制使用代理转发。5) L(last rule) # 表明当前规则是最后一条规则，停止分析以后规则的重写。6) N(next round) # 重新从第一条规则开始运行重写过程。7) C(chained with next rule) # 与下一条规则关联如果规则匹配则正常处理，该标志无效，如果不匹配，那么下面所有关联的规则都跳过。8) T=MIME-type(force MIME type) # 强制MIME类型9) NS (used only if no internal sub-request) # 只用于不是内部子请求10) NC(no case) # 不区分大小写11) QSA(query string append) # 追加请求字符串12) NE(no URI escaping of output) # 不在输出转义特殊字符例如：RewriteRule /foo/(.*) /bar?arg=P1%3d$1 [R,NE] # 将能正确的将/foo/zoo转换成/bar?arg=P1=zoo13) PT(pass through to next handler) # 传递给下一个处理例如：RewriteRule ^/abc(.*) /def$1 [PT] # 将会交给/def规则处理Alias /def /ghi14) S=num(skip next rule(s)) # 跳过num条规则15) E=VAR:VAL(set environment variable) # 设置环境变量</code></pre><h2 id="HTTP-跳转至-HTTPS-示例"><a href="#HTTP-跳转至-HTTPS-示例" class="headerlink" title="HTTP 跳转至 HTTPS 示例"></a>HTTP 跳转至 HTTPS 示例</h2><pre><code>RewriteEngine on  # 开启重写RewriteCond %&#123;SERVER_PORT&#125; !^443$  # 如果访问的不是 443 端口RewriteCond %&#123;REQUEST_URI&#125; !^/tz.php  #如果访问的url 不是 /tz.phpRewriteRule (.*) https://%&#123;SERVER_NAME&#125;/$1 [R]     # 跳转到  https：//域名+$1</code></pre><h2 id="HTTP-80-强制转-HTTPS"><a href="#HTTP-80-强制转-HTTPS" class="headerlink" title="HTTP 80 强制转 HTTPS"></a>HTTP 80 强制转 HTTPS</h2><pre><code>RewriteEngine OnRewriteCond %&#123;SERVER_PORT&#125; 80  # 如果访问的是80 端口RewriteRule ^(.*)$ https://%&#123;HTTP_HOST&#125;/$1 [R,L]  # 跳转 https </code></pre><h2 id="强制301重定向-HTTPS"><a href="#强制301重定向-HTTPS" class="headerlink" title="强制301重定向 HTTPS"></a>强制301重定向 HTTPS</h2><pre><code>&lt;IfModule mod_rewrite.c&gt;RewriteEngine onRewriteBase /  # 表示项目根目录RewriteCond %&#123;SERVER_PORT&#125; !^443$  # 如果访问的不是443 端口RewriteRule (.*) https://%&#123;SERVER_NAME&#125;/$1 [R=301,L]  # 重定向到 301&lt;/IfModule&gt;</code></pre><h2 id="重命名目录"><a href="#重命名目录" class="headerlink" title="重命名目录"></a>重命名目录</h2><pre><code>RewriteRule   ^/?old_directory/([a-z\.]+)$   new_directory/$1   [R=301,L]</code></pre><h2 id="图片防盗链"><a href="#图片防盗链" class="headerlink" title="图片防盗链"></a>图片防盗链</h2><p>   RewriteCond   %{HTTP_REFERER}   !^$ # 如果上个页面地址为空<br>   RewriteCond    %{HTTP_REFERER}   !^http://(www.)?example.com/   [NC]    #或者不是来自你自己的域名<br>   RewriteRule   .(gif|jpg|png)$   - [F]  #禁止访问</p><h2 id="如果文件不存在重定向到404页面"><a href="#如果文件不存在重定向到404页面" class="headerlink" title="如果文件不存在重定向到404页面"></a>如果文件不存在重定向到404页面</h2><pre><code>RewriteCond   %&#123;REQUEST_FILENAME&#125;   !-f  # 如果访问的不是一个文件RewriteCond   %&#123;REQUEST_FILENAME&#125;   !-d  #如果访问的不是一个目录RewriteRule   .?   /404.php   [L]   #跳转到网站根目录# 也可携带参数#RewriteRule ^/?(.*)$ /404.php?url=$1 [L]</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装mysql服务&quot;&gt;&lt;a href=&quot;#安装mysql服务&quot; class=&quot;headerlink&quot; title=&quot;安装mysql服务&quot;&gt;&lt;/a&gt;安装mysql服务&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;1.下载地址：https://downloads.mysql.com</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue学习1</title>
    <link href="http://example.com/2023/02/22/vue%E5%AD%A6%E4%B9%A01/"/>
    <id>http://example.com/2023/02/22/vue%E5%AD%A6%E4%B9%A01/</id>
    <published>2023-02-22T14:18:25.000Z</published>
    <updated>2023-07-13T06:20:53.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vuecli-vue脚手架"><a href="#vuecli-vue脚手架" class="headerlink" title="vuecli  vue脚手架"></a>vuecli  vue脚手架</h1><pre><code>vue 它是一个插件  最基础的项目架构 帮集成webpack 构建 打包 编译 包含基本的架子安装命令：    npm install -g @vue/cli            npm i -g @vue/cli            -g      表示全局安装查看脚手架版本         vue --version</code></pre><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><pre><code>vue create [项目名称]默认安装项   [babel]  编译es6的语法    [eslint]     项目语法检查  可开关vue ui 启动vue ui操作界面</code></pre><h1 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h1><pre><code>/src/assets  目录存放 icon 图片/src/api     存放  api  文件夹/src/util    存放  一些工具方法/src/storage 存放 数据存储的工具箱/src/pages/src/router.js</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vuecli-vue脚手架&quot;&gt;&lt;a href=&quot;#vuecli-vue脚手架&quot; class=&quot;headerlink&quot; title=&quot;vuecli  vue脚手架&quot;&gt;&lt;/a&gt;vuecli  vue脚手架&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;vue 它是一个插件  最基础的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java学习1</title>
    <link href="http://example.com/2023/02/08/java%E5%AD%A6%E4%B9%A01/"/>
    <id>http://example.com/2023/02/08/java%E5%AD%A6%E4%B9%A01/</id>
    <published>2023-02-08T03:39:50.000Z</published>
    <updated>2023-07-08T13:11:09.697Z</updated>
    
    <content type="html"><![CDATA[<p>git</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;git&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
