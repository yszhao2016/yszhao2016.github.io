<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yszhao的博客</title>
  
  <subtitle>记录我的生活 学习</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-08-01T12:30:47.100Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>yszhao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springboot学习</title>
    <link href="http://example.com/2023/08/01/springboot%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/08/01/springboot%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-08-01T12:20:47.000Z</published>
    <updated>2023-08-01T12:30:47.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建基于springboot-项目"><a href="#创建基于springboot-项目" class="headerlink" title="创建基于springboot 项目"></a>创建基于springboot 项目</h2><h2 id="1-maven方式"><a href="#1-maven方式" class="headerlink" title="1.maven方式"></a>1.maven方式</h2><pre><code>pom.xml文件加入  &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;2.5.6&lt;/version&gt;   &lt;/parent&gt;         &lt;dependencies&gt;       &lt;!-- Web 依赖 --&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;       &lt;/dependency&gt;       &lt;!-- Web 依赖 --&gt;   &lt;/dependencies&gt;更新库就可以</code></pre><h2 id="2-通过官网的spring-initializr安装"><a href="#2-通过官网的spring-initializr安装" class="headerlink" title="2. 通过官网的spring initializr安装"></a>2. 通过官网的spring initializr安装</h2><pre><code>https://start.spring.io/  </code></pre><h2 id="3-idea旗舰版-新建时-可以选"><a href="#3-idea旗舰版-新建时-可以选" class="headerlink" title="3.idea旗舰版 新建时 可以选"></a>3.idea旗舰版 新建时 可以选</h2><h2 id="启动springboot"><a href="#启动springboot" class="headerlink" title="启动springboot"></a>启动springboot</h2><p> 在package创建类加上@SpringBootApplication</p><pre><code>package com.zysstudy;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class StartApplication &#123;    public static void main(String[] args) &#123;        SpringApplication.run(StartApplication.class,args);    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;创建基于springboot-项目&quot;&gt;&lt;a href=&quot;#创建基于springboot-项目&quot; class=&quot;headerlink&quot; title=&quot;创建基于springboot 项目&quot;&gt;&lt;/a&gt;创建基于springboot 项目&lt;/h2&gt;&lt;h2 id=&quot;1-mav</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>升级openssh</title>
    <link href="http://example.com/2023/08/01/%E5%8D%87%E7%BA%A7openssh/"/>
    <id>http://example.com/2023/08/01/%E5%8D%87%E7%BA%A7openssh/</id>
    <published>2023-08-01T11:48:14.000Z</published>
    <updated>2023-08-01T12:09:29.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos系统"><a href="#centos系统" class="headerlink" title="centos系统"></a>centos系统</h1><h2 id="查看是否安装openssh"><a href="#查看是否安装openssh" class="headerlink" title="查看是否安装openssh"></a>查看是否安装openssh</h2><pre><code>rpm -qa|grep openssh有则卸载卸载用rpm -e 如果出现依赖包导致无法卸载，在最后面加上--nodeps即可rpm -e openssl --nodepsyum remove openssh-server卸载还可以手动删除  /etc/init.d/sshd   /etc/ssh  /usr/bin/ssh  /usr/sbin/sshd      </code></pre><h2 id="查当前openssh版本是否需要升级"><a href="#查当前openssh版本是否需要升级" class="headerlink" title="查当前openssh版本是否需要升级"></a>查当前openssh版本是否需要升级</h2><pre><code>ssh -V</code></pre><h2 id="备份配置文件"><a href="#备份配置文件" class="headerlink" title="备份配置文件"></a>备份配置文件</h2><pre><code>mv /etc/ssh /etc/ssh.bak</code></pre><h2 id="下载最新版本"><a href="#下载最新版本" class="headerlink" title="下载最新版本"></a>下载最新版本</h2><pre><code>https://www.openssh.com/openbsd.html    </code></pre><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><pre><code>./configure \  --prefix=/usr \  --sysconfdir=/etc/ssh \  --with-md5-passwords \  --with-pam \  --with-tcp-wrappers \  --with-ssl-dir=/usr/local/ssl      make &amp;&amp; make install    </code></pre><h2 id="修改相关配置"><a href="#修改相关配置" class="headerlink" title="修改相关配置"></a>修改相关配置</h2><pre><code>cp -p contrib/redhat/sshd.init /etc/init.d/sshd chmod u+x /etc/init.d/sshd /etc/init.d/sshd start 此命令后就加入systemctlsystemctl enable sshd 加入开机启动# vim /etc/ssh/sshd_configPermitRootLogin yes                #允许root账户登录，单root账户必须加上，其他的参数请自行修改</code></pre><h2 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h2><pre><code>1.编译时报错    configure: error: PAM headers not found    解决方法        yum -y install pam-devel        2.编译别的目录，然后通过相应文件覆盖或者软连接方式更新  如果密码正确 就是登录不上    删除重装     </code></pre><h1 id="ubutun系统"><a href="#ubutun系统" class="headerlink" title="ubutun系统"></a>ubutun系统</h1><h2 id="查看是否安装"><a href="#查看是否安装" class="headerlink" title="查看是否安装"></a>查看是否安装</h2><pre><code>dpkg --list|grep ssh卸载sudo apt-get remove openssh-server </code></pre><h2 id="编译过程参考centos即可"><a href="#编译过程参考centos即可" class="headerlink" title="编译过程参考centos即可"></a>编译过程参考centos即可</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;centos系统&quot;&gt;&lt;a href=&quot;#centos系统&quot; class=&quot;headerlink&quot; title=&quot;centos系统&quot;&gt;&lt;/a&gt;centos系统&lt;/h1&gt;&lt;h2 id=&quot;查看是否安装openssh&quot;&gt;&lt;a href=&quot;#查看是否安装openssh&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx之location</title>
    <link href="http://example.com/2023/07/29/nginx%E4%B9%8Blocation/"/>
    <id>http://example.com/2023/07/29/nginx%E4%B9%8Blocation/</id>
    <published>2023-07-29T07:33:47.000Z</published>
    <updated>2023-07-29T07:33:47.373Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>shell脚本学习1</title>
    <link href="http://example.com/2023/07/29/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A01-1/"/>
    <id>http://example.com/2023/07/29/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A01-1/</id>
    <published>2023-07-29T06:58:19.000Z</published>
    <updated>2023-07-29T06:58:19.577Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx配置</title>
    <link href="http://example.com/2023/07/27/nginx%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2023/07/27/nginx%E9%85%8D%E7%BD%AE/</id>
    <published>2023-07-27T06:17:43.000Z</published>
    <updated>2023-07-29T07:31:08.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-、配置详解"><a href="#一-、配置详解" class="headerlink" title="一 、配置详解"></a>一 、配置详解</h1><h2 id="1-1nginx配置文件"><a href="#1-1nginx配置文件" class="headerlink" title="1.1nginx配置文件"></a>1.1nginx配置文件</h2><pre><code>#nginx 已那个用户身份访问文件user  www;  #指定nginx使用的worker进程数worker_processes 8;   #worker_cpu_affinity是一个用于配置工作进程CPU亲和性的选项。#CPU亲和性是指将进程或线程绑定到特定的CPU核心上，以提高性能和效率。#通常cpu几核，就配置几个worker_cpu_affinity 0000001 00000010 00000011 00000100 00000101 00000110 00000111 00001000;#PID配置项是用于指定保存主进程ID的文件路径pid        /var/run/nginx.pid;#用于限制每个worker进程可以打开的最大文件描述符数量。#ulimit -n 查看系统文件句柄数   设置为系统允许的最大文件句柄数的 80% - 90%worker_rlimit_nofile 65535;#用于控制Nginx服务器的事件模型和并发处理方式。events &#123;    #用于设置每个worker进程的最大并发连接数 即每个worker进程可以同时处理的最大客户端连接数    worker_connections 1024;        #常见的事件模型包括epoll、kqueue和select等。    use epoll;        #用于指定是否允许一个worker进程同时接受多个新连接    multi_accept on;&#125;#用于代理TCP和UDP流量，允许将Nginx作为代理服务器来处理网络流量#使用stream模块可以使Nginx具备代理TCP和UDP流量的能力stream &#123;       include /etc/nginx/stream/*.conf;&#125;#此模块用于配置HTTP服务器，允许主机作为Web服务器来处理HTTP请求http &#123;    #引入mime头文件  定义了Nginx的mime类型        include       mime.types;        #指令用于设置在请求无法匹配到任何MIME类型时的默认类型    default_type  application/octet-stream;        #定义日志格式  main 为日志格式 名称    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;                          #定义访问日志路径 main 指用那个日志格式名称                      access_log  /var/log/nginx/access.log  main;        # 当将sendfile设置为on时，Nginx使用sendfile()系统调用来直接将文件从磁盘传输到网络，    # 而无需将文件数据复制到用户空间。这样可以显着提高文件传输速度和效率。    sendfile on;        #将tcp_nopush设置为on时，Nginx会禁用TCP_CORK    #允许在nginx worker进程发送数据时立即将响应发送到客户端，而无需等待TCP缓冲区填满。    #将tcp_nopush设置为on可以提高响应的实时性，允许立即发送数据到客户端    tcp_nopush on;        #将tcp_nodelay设置为on时，Nginx会打开TCP_NODELAY，这将禁用TCP的Nagle算法，    #以便在发送小数据包或有延迟要求的数据时能够及时发送数据。    #将tcp_nodelay设置为on可以减少TCP延迟，适用于实时性要求高的应用场景。    tcp_nodelay on;            #配置空主机头 404 就是禁用http通过ip访问    server &#123;       listen 80 default;       server_name _;       root html;       location / &#123; return 404;&#125;       location ~ /.ht &#123; deny all; &#125;    &#125;        include /etc/nginx/conf.d/*.conf;&#125;</code></pre><h2 id="1-2log-format可用变量"><a href="#1-2log-format可用变量" class="headerlink" title="1.2log_format可用变量"></a>1.2log_format可用变量</h2><pre><code>$remote_addr：客户端的IP地址。$remote_user：客户端的用户名称（如果有授权）。$time_local：访问时间和日期（格式：[day/month/year:hour:minute:second zone]）。$request_method：HTTP请求的方法（例如GET或POST）。$request_uri：完整的请求URI。$request_length：请求的长度（包括请求行，请求头和请求体）。$status：HTTP响应的状态码。$body_bytes_sent：发送给客户端的响应体的字节数。$http_referer：请求中的“Referer”头部字段，包含了前一个页面的URL。$http_user_agent：请求的用户代理头部字段，表示发起请求的客户端工具或库。</code></pre><h2 id="1-3host配置文件"><a href="#1-3host配置文件" class="headerlink" title="1.3host配置文件"></a>1.3host配置文件</h2><h3 id="upstream-模块"><a href="#upstream-模块" class="headerlink" title="upstream 模块"></a>upstream 模块</h3><pre><code>#定义负载均衡#放置在 http 或 server 块upstream name &#123;         #用于指定上游服务器的地址和端口。可以指定多个server来定义多个上游服务器。     server backend1.example.com;          #max_fails 和 fail_timeout：用于设置上游服务器的故障处理策略     #max_fails 指定在多少次失败请求后将服务器标记为不可用     #fail_timeout 指定在服务器被标记为不可用后，多长时间内不再尝试请求。     server 127.0.0.1:8080 max_fails=3 fail_timeout=30s;        #设置与上游服务器的连接保持活动的时间。可以提高性能并减少连接建立的开销。    keepalive:32;&#125;#weight：用于设置服务器的权重。权重越高，Nginx 转发给该服务器的请求越多。#示例：upstream backend &#123;    server backend1.example.com weight=3;    server backend2.example.com weight=2;&#125;#ip_hash：使用客户端的IP地址进行负载均衡，使得来自同一IP地址的请求始终被转发到同一台上游服务器。#示例：upstream backend &#123;    ip_hash;    server backend1.example.com;    server backend2.example.com;&#125;</code></pre><h3 id="Server模块"><a href="#Server模块" class="headerlink" title="Server模块"></a>Server模块</h3><pre><code>server：定义一个虚拟主机server&#123;    listen：指定服务器监听的端口    server_name：配置域名或IP地址    root：指定网站文件的根目录    index：定义当访问网站时默认显示的文件    location：定义请求的URL匹配规则和对应的处理方法。    proxy_pass：用于反向代理服务器的配置。    ssl_certificate和ssl_certificate_key：配置SSL/TLS证书。    try_files：定义文件检查规则        gzip on;    将 Gzip 压缩功能开启。        将所有类型的文件都进行 Gzip 压缩。这意味着无论是文本文件、图像文件还是视频文件，    都将进行压缩传输。如果你希望只压缩特定类型的文件，可以指定具体的文件类型，    例如 gzip_types text/plain text/css application/javascript;。    gzip_types *;       (gzip_proxied on or gzip_proxied off or gzip_proxied expired no-cache no-store private auth) 指定需要压缩的响应类型，    并且设置允许或者不允许使用代理服务器进行压缩。any 表示无论何时都进行压缩。    gzip_proxied any;&#125;</code></pre><h1 id="二、常用示例"><a href="#二、常用示例" class="headerlink" title="二、常用示例"></a>二、常用示例</h1><h2 id="2-1-mysql-代理示例"><a href="#2-1-mysql-代理示例" class="headerlink" title="2.1 mysql 代理示例"></a>2.1 mysql 代理示例</h2><pre><code>stream &#123;        server &#123;            listen 63306;            proxy_connect_timeout 8s;            proxy_timeout 24h;            proxy_pass 192.168.0.108:3306;        &#125;&#125;</code></pre><h2 id="2-3-带upstream的写法"><a href="#2-3-带upstream的写法" class="headerlink" title="2.3 带upstream的写法"></a>2.3 带upstream的写法</h2><pre><code>upstream rd_servers &#123;  server 127.0.0.1:5000;&#125;server&#123;  server_tokens off;  listen 80;  server_name redash.xxxxx.com;  access_log /var/log/nginx/rd.access.log;  gzip on;  gzip_types *;  gzip_proxied any;  location / &#123;    proxy_set_header Host $http_host;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    proxy_set_header X-Forwarded-Proto $scheme;    proxy_pass       http://rd_servers;  &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-、配置详解&quot;&gt;&lt;a href=&quot;#一-、配置详解&quot; class=&quot;headerlink&quot; title=&quot;一 、配置详解&quot;&gt;&lt;/a&gt;一 、配置详解&lt;/h1&gt;&lt;h2 id=&quot;1-1nginx配置文件&quot;&gt;&lt;a href=&quot;#1-1nginx配置文件&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux-iptables使用总结</title>
    <link href="http://example.com/2023/07/26/linux-iptables%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/07/26/linux-iptables%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</id>
    <published>2023-07-26T07:31:32.000Z</published>
    <updated>2023-07-26T08:17:15.314Z</updated>
    
    <content type="html"><![CDATA[<p>一、iptables<br>    iptables防火墙没有启用,iptables命令仍然会显示默认的规则.</p><p>二、常用命令</p><p>常用参数</p><pre><code>-n 参数表示将 IP 地址和端口号显示为数字形式，而不是解析为主机名和服务名。-L 选项用于列出防火墙规则。-t nat 参数指定了要操作的表为 NAT 表，NAT 表用于处理网络地址转换相关的规则。</code></pre><p>iptables -n -L           显示当前防火墙规则列表。</p><p>iptables -t nat -n -L    看 iptables 中 NAT（Network Address Translation）表的规则。</p><p>结果怎么看</p><pre><code>Chain INPUT (policy ACCEPT)target     prot opt source               destination         ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0            state NEW udp dpt:2333ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:2333Chain FORWARD (policy DROP)target     prot opt source               destination         DOCKER-USER  all  --  0.0.0.0/0            0.0.0.0/0           DOCKER-ISOLATION-STAGE-1  all  --  0.0.0.0/0            0.0.0.0/0           ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHEDDOCKER     all  --  0.0.0.0/0            0.0.0.0/0           ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           Chain OUTPUT (policy ACCEPT)target     prot opt source               destination         Chain DOCKER (1 references)target     prot opt source               destination         ACCEPT     udp  --  0.0.0.0/0            172.17.0.2           udp dpt:60050ACCEPT     udp  --  0.0.0.0/0            172.17.0.2           udp dpt:60049ACCEPT     udp  --  0.0.0.0/0            172.17.0.2           udp dpt:60048ACCEPT     udp  --  0.0.0.0/0            172.17.0.2           udp dpt:60047Chain DOCKER-ISOLATION-STAGE-1 (1 references)target     prot opt source               destination         DOCKER-ISOLATION-STAGE-2  all  --  0.0.0.0/0            0.0.0.0/0           RETURN     all  --  0.0.0.0/0            0.0.0.0/0           Chain DOCKER-ISOLATION-STAGE-2 (1 references)target     prot opt source               destination         DROP       all  --  0.0.0.0/0            0.0.0.0/0           RETURN     all  --  0.0.0.0/0            0.0.0.0/0           Chain DOCKER-USER (1 references)target     prot opt source               destination         RETURN     all  --  0.0.0.0/0            0.0.0.0/0  &quot;LIBVIRT_FWI&quot;是一个iptables防火墙的链，并且该链已经被引用了一次允许所有协议（all）的流量从任意源IP地址（0.0.0.0/0）进入到目标IP地址为172.17.0.2  60047端口REJECT 拒绝ACCEPT 允许DROP   丢弃</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、iptables&lt;br&gt;    iptables防火墙没有启用,iptables命令仍然会显示默认的规则.&lt;/p&gt;
&lt;p&gt;二、常用命令&lt;/p&gt;
&lt;p&gt;常用参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-n 参数表示将 IP 地址和端口号显示为数字形式，而不是解析为主机名和服务名。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php常用函数总结</title>
    <link href="http://example.com/2023/07/25/php%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/07/25/php%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</id>
    <published>2023-07-25T07:54:20.000Z</published>
    <updated>2023-07-25T08:29:31.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、字符串处理函数"><a href="#一、字符串处理函数" class="headerlink" title="一、字符串处理函数"></a>一、字符串处理函数</h1><h2 id="1-1-str-pad"><a href="#1-1-str-pad" class="headerlink" title="1.1 str_pad()"></a>1.1 str_pad()</h2><p>str_pad(【必填 需要处理的字符串】,【必填 填充的长度】，【 可选 填充的字符串，默认空白】，【可选 填充字符串的哪边】)</p><pre><code>规定填充字符串的哪边 可能的值：STR_PAD_BOTH - 填充字符串的两侧。如果不是偶数，则右侧获得额外的填充。STR_PAD_LEFT - 填充字符串的左侧。STR_PAD_RIGHT - 填充字符串的右侧。这是默认的。</code></pre><p>示例 $str=10 ; echo str_pad($str,4,”0”,STR_PAD_LEFT);  <font color="red">意思就4位长度 不够就往左边补0</font></p><h2 id="2-1-strpos、stripos-、strrpos"><a href="#2-1-strpos、stripos-、strrpos" class="headerlink" title="2.1 strpos、stripos 、strrpos"></a>2.1 strpos、stripos 、strrpos</h2><h2 id="2-3-substr"><a href="#2-3-substr" class="headerlink" title="2.3 substr"></a>2.3 substr</h2><h2 id="2-4-strtolower-strtouplower-strlen-mb-strlen-trim-ltrim-rtrim-explode-implode常用"><a href="#2-4-strtolower-strtouplower-strlen-mb-strlen-trim-ltrim-rtrim-explode-implode常用" class="headerlink" title="2.4 strtolower strtouplower strlen mb_strlen trim ltrim rtrim explode implode常用"></a>2.4 strtolower strtouplower strlen mb_strlen trim ltrim rtrim explode implode常用</h2><pre><code>比较常用，不在赘述</code></pre><h1 id="二、数组处理函数"><a href="#二、数组处理函数" class="headerlink" title="二、数组处理函数"></a>二、数组处理函数</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、字符串处理函数&quot;&gt;&lt;a href=&quot;#一、字符串处理函数&quot; class=&quot;headerlink&quot; title=&quot;一、字符串处理函数&quot;&gt;&lt;/a&gt;一、字符串处理函数&lt;/h1&gt;&lt;h2 id=&quot;1-1-str-pad&quot;&gt;&lt;a href=&quot;#1-1-str-pad&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>跨域问题总结</title>
    <link href="http://example.com/2023/07/21/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/07/21/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2023-07-21T08:26:13.000Z</published>
    <updated>2023-07-21T08:26:13.871Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>session和cookie</title>
    <link href="http://example.com/2023/07/21/session%E5%92%8Ccookie/"/>
    <id>http://example.com/2023/07/21/session%E5%92%8Ccookie/</id>
    <published>2023-07-21T08:25:34.000Z</published>
    <updated>2023-07-21T08:25:34.576Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux服务之crond</title>
    <link href="http://example.com/2023/07/19/Linux%E6%9C%8D%E5%8A%A1%E4%B9%8Bcrond/"/>
    <id>http://example.com/2023/07/19/Linux%E6%9C%8D%E5%8A%A1%E4%B9%8Bcrond/</id>
    <published>2023-07-19T06:20:19.000Z</published>
    <updated>2023-07-19T09:32:19.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Cron介绍"><a href="#一、Cron介绍" class="headerlink" title="一、Cron介绍"></a>一、Cron介绍</h1><p>Cron被用来进行Linux系统的计划任务执行</p><h1 id="二、相关目录"><a href="#二、相关目录" class="headerlink" title="二、相关目录"></a>二、相关目录</h1><p>cron.d/*用来存放一些软件的Cron设置</p><p>cron.daily/每天执行一次的任务</p><p>cron.hourly/每小时执行一次的任务</p><p>cron.monthly/每个月执行一次的任务</p><p>cron.weekly/，每周执行一次的任务</p><p>每分钟执行一次脚本</p><pre><code>crontab -e</code></pre><h1 id="三、crontab使用"><a href="#三、crontab使用" class="headerlink" title="三、crontab使用"></a>三、crontab使用</h1><pre><code>*  *  *   *  *  命令/脚本分 时 日 月 周1  *  *   *  *  命令/脚本   指的是每个小时的第一分钟*/1 * * * *     命令/脚本   每分钟执行脚本crontab -l查看计划任务列表   </code></pre><h1 id="四、-etc-cron-daily-与crontab-e-定义的区别"><a href="#四、-etc-cron-daily-与crontab-e-定义的区别" class="headerlink" title="四、/etc/cron.daily 与crontab -e 定义的区别"></a>四、/etc/cron.daily 与crontab -e 定义的区别</h1><pre><code>/etc/cron.daily 和 crontab -e 都是用来设置定时任务的方式，但它们有一些不同之处。/etc/cron.daily 是一个目录，里面存放着以 &quot;cron&quot; 格式命名的脚本文件。这些脚本会每天执行一次，通常在系统闲置时执行。这个目录中的脚本是全局的，适用于整个系统的所有用户。而 crontab -e 则是一个命令，用于编辑和管理用户个人的 crontab 文件。crontab 文件中定义了用户的定时任务计划。通过编辑 crontab 文件，用户可以设置自己的定时任务，包括每天、每周、每月或其他时间间隔的执行。因此，主要区别在于：/etc/cron.daily 适用于全局系统级别的定时任务，而 crontab -e 是用户级别的定时任务。/etc/cron.daily 中的脚本在每天执行一次，而 crontab -e 可以更精确地设置时间间隔。/etc/cron.daily 中的脚本对所有用户有效，而 crontab -e 只对当前用户有效。需要注意的是，修改 /etc/cron.daily 目录中的文件需要 root 权限，而 crontab -e 只需要用户自己的权限</code></pre><h1 id="五、Linux-anacron"><a href="#五、Linux-anacron" class="headerlink" title="五、Linux anacron"></a>五、Linux anacron</h1><p> 执行由于关机  忘记执行的任务</p><p> 配置好 /etc/anacrontab 文件</p><p> 更具体学习参考<a href="http://c.biancheng.net/view/1095.html">http://c.biancheng.net/view/1095.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、Cron介绍&quot;&gt;&lt;a href=&quot;#一、Cron介绍&quot; class=&quot;headerlink&quot; title=&quot;一、Cron介绍&quot;&gt;&lt;/a&gt;一、Cron介绍&lt;/h1&gt;&lt;p&gt;Cron被用来进行Linux系统的计划任务执行&lt;/p&gt;
&lt;h1 id=&quot;二、相关目录&quot;&gt;&lt;a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>守护进程-supervisor</title>
    <link href="http://example.com/2023/07/19/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B-supervisor/"/>
    <id>http://example.com/2023/07/19/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B-supervisor/</id>
    <published>2023-07-19T03:38:09.000Z</published>
    <updated>2023-07-19T03:40:33.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><pre><code>yum install supervisor    #centos 系统apt install supervisor    #ubuntu 系统</code></pre><h1 id="二、配置守护进程"><a href="#二、配置守护进程" class="headerlink" title="二、配置守护进程"></a>二、配置守护进程</h1><p><font color='red'>在/etc/supervisord.d/下新建后缀名为ini的文件</font></p><pre><code>; 设置进程的名称，使用 supervisorctl 来管理进程时需要使用该进程名[program:myblog] directory = /home/web/myblog          ; 程序的启动目录command=./start.sh start              ; 启动命令 最好绝对路径autostart = true                      ; 在 supervisord 启动的时候也自动启动numprocs=1                            ; 默认为1RestartSec=30process_name=%(program_name)s         ; 默认为 %(program_name)s，即 [program:x] 中的 xuser=root                             ; 使用 root 用户来启动该进程autorestart=true                      ; 程序崩溃时自动重启，重启次数是有限制的，默认为3次redirect_stderr=true                  ; 重定向输出的日志stderr_logfile= /home/web/myblog/myblog_stderr.logstdout_logfile = /home/web/myblog/myblog_stdout.logloglevel=info</code></pre><h1 id="三、supervisord管理"><a href="#三、supervisord管理" class="headerlink" title="三、supervisord管理"></a>三、supervisord管理</h1><pre><code>systemctl status  supervisordsystemctl start  supervisord  systemctl stop  supervisord  systemctl restart  supervisord  </code></pre><h1 id="四、supervisorctl管理"><a href="#四、supervisorctl管理" class="headerlink" title="四、supervisorctl管理"></a>四、supervisorctl管理</h1><pre><code>supervisorctl start server:myblog</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;yum install supervisor    #centos 系统

apt install supe</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>jenkins-发布php项目</title>
    <link href="http://example.com/2023/07/19/jenkins-%E5%8F%91%E5%B8%83php%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2023/07/19/jenkins-%E5%8F%91%E5%B8%83php%E9%A1%B9%E7%9B%AE/</id>
    <published>2023-07-19T01:16:30.000Z</published>
    <updated>2023-07-19T01:16:30.944Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>linux系统后台运行任务</title>
    <link href="http://example.com/2023/07/19/linux%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E4%BB%BB%E5%8A%A1/"/>
    <id>http://example.com/2023/07/19/linux%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E4%BB%BB%E5%8A%A1/</id>
    <published>2023-07-19T01:15:25.000Z</published>
    <updated>2023-07-19T01:15:25.544Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>php扩展编译安装</title>
    <link href="http://example.com/2023/07/19/php%E6%89%A9%E5%B1%95%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2023/07/19/php%E6%89%A9%E5%B1%95%E5%AE%89%E8%A3%85/</id>
    <published>2023-07-19T01:14:51.000Z</published>
    <updated>2023-07-19T03:24:39.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、找点phpize-和-php-config路径"><a href="#一、找点phpize-和-php-config路径" class="headerlink" title="一、找点phpize 和 php-config路径"></a>一、找点phpize 和 php-config路径</h1><pre><code>find / -name phpizefind / -name php-config</code></pre><h1 id="二、找到"><a href="#二、找到" class="headerlink" title="二、找到"></a>二、找到</h1><p>项目目录下执行 查找到的phpize </p><pre><code>/opt/remi/php74/root/usr/bin/phpize如报错Can&#39;t find PHP headers in /usr/include/php The php-devel package is required for use of this command...安装php-devel即可yum install -y php-develremi安装如下安装yum install -y php73-php-devel</code></pre><h1 id="三、编译"><a href="#三、编译" class="headerlink" title="三、编译"></a>三、编译</h1><pre><code> 1.进入项目目录下 ./configure --with-php-config=【第一步查询到的路径】  示例    ./configure --with-php-config=/www/server/php/71/bin/php-config 2. 执行  make &amp;&amp; make install</code></pre><h1 id="四、添加配置"><a href="#四、添加配置" class="headerlink" title="四、添加配置"></a>四、添加配置</h1><pre><code>vi /具体路径/php.ini extension=swoole.so如是remi 安装的php 在/etc/opt/remi/php73/php.d下新建新建ini文件  参考其他设置下万变方案 phpinfo 看下是如何加载扩展的 具体的目录 多有</code></pre><h1 id="五、重启服务"><a href="#五、重启服务" class="headerlink" title="五、重启服务"></a>五、重启服务</h1><pre><code>systemctl restart php-fpm   </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、找点phpize-和-php-config路径&quot;&gt;&lt;a href=&quot;#一、找点phpize-和-php-config路径&quot; class=&quot;headerlink&quot; title=&quot;一、找点phpize 和 php-config路径&quot;&gt;&lt;/a&gt;一、找点phpize </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx之logrotate</title>
    <link href="http://example.com/2023/07/19/nginx%E4%B9%8Blogrotate/"/>
    <id>http://example.com/2023/07/19/nginx%E4%B9%8Blogrotate/</id>
    <published>2023-07-19T01:14:27.000Z</published>
    <updated>2023-07-19T09:53:23.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、logrotate介绍"><a href="#一、logrotate介绍" class="headerlink" title="一、logrotate介绍"></a>一、logrotate介绍</h1><p>logrotate是centos自带命令，其他linux操作系统可能需要自行安装，用来进行日志切割和定期删除，</p><p>简单来说就是将某个日志文件按照时间或大小分割成多份，删除时间久远的日志。</p><h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><pre><code>yum install -y logrotate     #centos 系统apt install -y logrotate    #ubuntu 系统</code></pre><h1 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h1><p>/etc/logrotate.conf是全局配置</p><pre><code>#指定日志文件保留几个副本rotate 4# 指定当发生滚动后，创建一个新的空日志文件（权限不变）create# 指定滚动文件的后缀是当前的日期dateext  # 指定是否对滚动日志进行压缩#compress# 加载子配置include /etc/logrotate.d# 指定对特定文件的滚动规则/var/log/wtmp &#123;    monthly    create 0664 root utmp    minsize 1M  #指定文件小于1m就不滚动    rotate 1&#125;/var/log/btmp &#123;    missingok    monthly    create 0600 root utmp    rotate 1&#125;</code></pre><p>/etc/logrotate.d/*（子配置）</p><h1 id="三、执行"><a href="#三、执行" class="headerlink" title="三、执行"></a>三、执行</h1><p>方案一<br>    通过 /etc/cron.daily/logrotate 配置<br>方案二<br>    crontab -e写入，内容为“  59 23 * * * /usr/sbin/logrotate -f /home/zmq/daily_logrotate  </p><h1 id="四、具体的配置文件"><a href="#四、具体的配置文件" class="headerlink" title="四、具体的配置文件"></a>四、具体的配置文件</h1><pre><code>/var/log/nginx/*.log &#123;          daily          missingok          rotate 52          compress          delaycompress          notifempty          create 640 nginx adm          sharedscripts          postrotate                 if [ -f /var/run/nginx.pid ]; then                         kill -USR1 `cat /var/run/nginx.pid`                 fi          endscript &#125;    /var/opt/remi/php71/log/php-fpm/*log &#123;        missingok        notifempty        sharedscripts        delaycompress        postrotate            /bin/kill -SIGUSR1 `cat /var/opt/remi/php71/run/php-fpm/php-fpm.pid 2&gt;/dev/null` 2&gt;/dev/null ||     true        endscript  &#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、logrotate介绍&quot;&gt;&lt;a href=&quot;#一、logrotate介绍&quot; class=&quot;headerlink&quot; title=&quot;一、logrotate介绍&quot;&gt;&lt;/a&gt;一、logrotate介绍&lt;/h1&gt;&lt;p&gt;logrotate是centos自带命令，其他lin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hj212环保协议-2007</title>
    <link href="http://example.com/2023/07/13/hj212%E7%8E%AF%E4%BF%9D%E5%8D%8F%E8%AE%AE-2007/"/>
    <id>http://example.com/2023/07/13/hj212%E7%8E%AF%E4%BF%9D%E5%8D%8F%E8%AE%AE-2007/</id>
    <published>2023-07-13T12:08:15.000Z</published>
    <updated>2023-07-13T12:08:15.753Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>shell脚本学习1</title>
    <link href="http://example.com/2023/07/13/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A01/"/>
    <id>http://example.com/2023/07/13/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A01/</id>
    <published>2023-07-13T11:57:19.000Z</published>
    <updated>2023-07-13T11:57:19.015Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx-vhost-安全配置模版</title>
    <link href="http://example.com/2023/07/13/nginx-vhost-%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E6%A8%A1%E7%89%88/"/>
    <id>http://example.com/2023/07/13/nginx-vhost-%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E6%A8%A1%E7%89%88/</id>
    <published>2023-07-13T11:11:30.000Z</published>
    <updated>2023-07-13T11:12:24.875Z</updated>
    
    <content type="html"><![CDATA[<p>#nginx-vhost-安全配置模版</p><pre><code>server&#123;        listen 443 ssl ;        server_name  [域名或者ip];        index        index.php index.html index.htm;        root [项目路径];        access_log  /var/log/nginx/[项目名称].access.log;        error_log   /var/log/nginx/[项目名称].error.log;        #证书文件名称        ssl_certificate [证书路径 公钥];        #私钥文件名称        ssl_certificate_key [证书路径 私钥];        ssl_session_timeout 5m;        #请按照以下协议配置        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;        #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;        ssl_prefer_server_ciphers on        #允许cookie        add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;        #安全头        add_header X-Xss-header &quot;1;mode=block&quot;;        add_header Set-Cookie &quot;HttpOnly&quot;;        add_header Set-Cookie &quot;Secure&quot;;        add_header X-Frame-Options &quot;SAMEORIGIN&quot;;        location ~ \.(json|lock|git)$ &#123;                 deny all;        &#125;        location ~ ^/(uploads|assets)/.*\.(php|php5|jsp|shtml)$ &#123;            deny all;        &#125;        location ~ .*\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx)$ &#123;            add_header Content-Disposition attachment;        &#125;        location =/assets/libs/bootstrap/Gemfile &#123;                       return 404;        &#125;        location ~ /\. &#123;            deny  all;        &#125;        location / &#123;                proxy_cookie_path / &quot;/; httponly; secure; SameSite=None&quot;;                if (!-e $request_filename) &#123;                        rewrite  ^(.*)$  /index.php?s=/$1  last;                        break;                &#125;        &#125;        location ~ \.php(.*)$ &#123;                fastcgi_pass   [访问php方式];                fastcgi_index  index.php;                fastcgi_split_path_info  ^((?U).+\.php)(/?.+)$;                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;                fastcgi_param  PATH_INFO  $fastcgi_path_info;                fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;                include        fastcgi_params;        &#125;        #timeout        large_client_header_buffers 4 16k;        client_max_body_size 180m;        client_body_buffer_size 128k;        fastcgi_connect_timeout 600;        fastcgi_read_timeout 600;        fastcgi_send_timeout 600;        fastcgi_buffer_size 128k;        fastcgi_buffers   2 256k;        fastcgi_busy_buffers_size 256k;        fastcgi_temp_file_write_size 256k;        proxy_read_timeout  240s;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#nginx-vhost-安全配置模版&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server&amp;#123;
        listen 443 ssl ;
        server_name  [域名或者ip];
        index        index.php in</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>fail2ban软件使用</title>
    <link href="http://example.com/2023/07/09/fail2ban%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2023/07/09/fail2ban%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/</id>
    <published>2023-07-09T06:19:39.000Z</published>
    <updated>2023-07-13T12:27:58.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><pre><code>CentOS 中使用fail2ban和firewalld限制IP拦截cc攻击</code></pre><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre><code>yum -y install fail2ban</code></pre><h1 id="新建规则"><a href="#新建规则" class="headerlink" title="新建规则"></a>新建规则</h1><pre><code>/etc/fail2ban/filter.d/  编写过滤规则的目录 vi /etc/fail2ban/filter.d/nginx-cc.conf[Definition]#failregex = &lt;HOST&gt;-.*-.*HTTP/1.*(404|301|503).*$failregex = ^&lt;HOST&gt; -.*&quot;(GET|POST).* HTTP\/.*$ignoreregex =</code></pre><h1 id="正则规则检查"><a href="#正则规则检查" class="headerlink" title="正则规则检查"></a>正则规则检查</h1><pre><code>fail2ban-regex /var/log/nginx/access.log &quot;&lt;HOST&gt; -.*- .*HTTP/1.* .* .*$&quot;  </code></pre><h1 id="根据配置文件检查"><a href="#根据配置文件检查" class="headerlink" title="根据配置文件检查"></a>根据配置文件检查</h1><pre><code>fail2ban-regex /var/log/nginx/access.log /etc/fail2ban/filter.d/nginx-cc.conf  </code></pre><h1 id="控制规则配置文件"><a href="#控制规则配置文件" class="headerlink" title="控制规则配置文件"></a>控制规则配置文件</h1><pre><code>[DEFAULT]ignoreip = 127.0.0.1/8  117.89.130.84 117.89.134.183/16  218.2.244.241/16 49.82.132.215/16 122.195.252.237/16 114.238.64.157/16 180.110.114.152/16#放行的ip 可以带网段ignorecommand =bantime  = 60#屏蔽时间，-1是永久屏蔽findtime  = 60#设置限定时间内超过 最大尝试次数 限制次数即被封锁maxretry = 5#最大尝试次数backend = auto#日志修改后检测机制usedns = warn#ssh链接加速logencoding = autoenabled = false[sshd]## 分类设置（基于 SSHD 服务的防护） enabled = true## 是否开启防护，false 为关闭 filter = sshd## 过滤规则 filter 名称，对应 filter.d 目录下的 sshd.conf  action   = iptables[name=SSH, port=22, protocol=tcp] #《###action = iptables[name=SSH, port=ssh, protocol=tcp] ## 动作参数#sendmail-whois[name=SSH, dest=you@example.com, sender=fail2ban@example.com,   sendername=&quot;Fail2Ban&quot;]## 邮件通知参数## 收件人地址           ## 发件人地址####》   这是个例子 logpath = /var/log/secure## 检测系统登陆日志文件 maxretry = 3## 最大尝试次数banaction=iptables-allportsbantime = 3600[nginx-cc] #过滤规则名称 下方就是 规律规则 相关 限制条件enabled = trueport=http,httpsfilter = nginx-ccfindtime = 1#1秒钟检查一次maxretry = 100#最多100个bantime = 3600#封锁ip的时间banaction=iptables-multiport#匹配的哪些日志文件logpath = /var/log/nginx/*access.log          /var/log/nginx/access.log</code></pre><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><pre><code>#启动systemctl start fail2ban#停止systemctl stop fail2ban#查看具体规则限制了哪些ipfail2ban-client status 规则名称示例：   fail2ban-client status nginx-cc#解封某条过滤规则封锁的ipfail2ban-client set nginx-cc unbanip  112.84.237.102</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;CentOS 中使用fail2ban和firewalld限制IP拦截cc攻击
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;安</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web安全</title>
    <link href="http://example.com/2023/07/09/web%E5%AE%89%E5%85%A8/"/>
    <id>http://example.com/2023/07/09/web%E5%AE%89%E5%85%A8/</id>
    <published>2023-07-09T06:16:41.000Z</published>
    <updated>2023-07-13T06:20:53.705Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
